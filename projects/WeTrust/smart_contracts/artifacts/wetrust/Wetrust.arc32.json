{
    "hints": {
        "init(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "add(uint64,uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "remove(uint64,uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTrustedApp(account)uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTrustedASA(account)uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getAdjacencyList(account)address[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Wetrust",
        "methods": [
            {
                "name": "init",
                "args": [
                    {
                        "type": "pay",
                        "name": "payMbr"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "add",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app",
                        "desc": "- list of trusted Applications to add; leave empty if not adding any"
                    },
                    {
                        "type": "uint64",
                        "name": "asset",
                        "desc": "- list of trusted ASAs to add; leave empty if not adding any"
                    },
                    {
                        "type": "address",
                        "name": "peer",
                        "desc": "- list of trusted peers to add; leave empty if not adding any"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "method to add trusted Applications, trusted ASAs and trusted peers to your list"
            },
            {
                "name": "remove",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app"
                    },
                    {
                        "type": "uint64",
                        "name": "asset"
                    },
                    {
                        "type": "address",
                        "name": "peer"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getTrustedApp",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64[]"
                }
            },
            {
                "name": "getTrustedASA",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64[]"
                }
            },
            {
                "name": "getAdjacencyList",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "address[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}