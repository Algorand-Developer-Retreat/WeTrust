{
    "name": "Wetrust",
    "structs": {},
    "methods": [
        {
            "name": "init",
            "args": [
                {
                    "type": "pay",
                    "name": "payMbr"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add",
            "args": [
                {
                    "type": "uint64",
                    "name": "app",
                    "desc": "- list of trusted Applications to add; leave empty if not adding any"
                },
                {
                    "type": "uint64",
                    "name": "asset",
                    "desc": "- list of trusted ASAs to add; leave empty if not adding any"
                },
                {
                    "type": "address",
                    "name": "peer",
                    "desc": "- list of trusted peers to add; leave empty if not adding any"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "method to add trusted Applications, trusted ASAs and trusted peers to your list",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "remove",
            "args": [
                {
                    "type": "uint64",
                    "name": "app"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "address",
                    "name": "peer"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTrustedApp",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTrustedASA",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getAdjacencyList",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "address[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "trustedApp": {
                    "keyType": "AVMString",
                    "valueType": "uint64[]",
                    "key": "dHJ1c3RlZF9hcHA="
                },
                "trustedASA": {
                    "keyType": "AVMString",
                    "valueType": "uint64[]",
                    "key": "dHJ1c3RlZF9hc2E="
                },
                "adjacencyList": {
                    "keyType": "AVMString",
                    "valueType": "address[]",
                    "key": "YWRqYWNlbmN5X2xpc3Q="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        363,
                        460,
                        557,
                        650,
                        750,
                        850,
                        943,
                        953,
                        963
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        400,
                        497,
                        592,
                        677,
                        777,
                        877
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        124,
                        147,
                        170,
                        193,
                        214,
                        235
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        545
                    ],
                    "errorMessage": "adjacencyList should exist, call init first"
                },
                {
                    "pc": [
                        291,
                        467,
                        562
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        262
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        127,
                        150,
                        173,
                        196,
                        217,
                        238
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        370
                    ],
                    "errorMessage": "max number of App reached"
                },
                {
                    "pc": [
                        248
                    ],
                    "errorMessage": "transaction type is pay"
                },
                {
                    "pc": [
                        448
                    ],
                    "errorMessage": "trustedASAlist should exist, call init first"
                },
                {
                    "pc": [
                        351
                    ],
                    "errorMessage": "trustedAppList should exist, call init first"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDggMzIKICAgIGJ5dGVjYmxvY2sgInRydXN0ZWRfYXBwIiAidHJ1c3RlZF9hc2EiICJhZGphY2VuY3lfbGlzdCIgMHgwMDAwIDB4MDAwMDAwMDAwMDAwMDAwMCAweDE1MWY3Yzc1CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjIxCiAgICAvLyBleHBvcnQgY2xhc3MgV2V0cnVzdCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMQogICAgcHVzaGJ5dGVzcyAweGExZmI1MDZiIDB4ODdhODNkZmMgMHhlZjNhMTIzMSAweDhhZGQ3NGQyIDB4ZGFiN2VlM2YgMHgzYmEyNGU3ZiAvLyBtZXRob2QgImluaXQocGF5KXZvaWQiLCBtZXRob2QgImFkZCh1aW50NjQsdWludDY0LGFkZHJlc3Mpdm9pZCIsIG1ldGhvZCAicmVtb3ZlKHVpbnQ2NCx1aW50NjQsYWRkcmVzcyl2b2lkIiwgbWV0aG9kICJnZXRUcnVzdGVkQXBwKGFjY291bnQpdWludDY0W10iLCBtZXRob2QgImdldFRydXN0ZWRBU0EoYWNjb3VudCl1aW50NjRbXSIsIG1ldGhvZCAiZ2V0QWRqYWNlbmN5TGlzdChhY2NvdW50KWFkZHJlc3NbXSIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5faW5pdF9yb3V0ZUAzIG1haW5fYWRkX3JvdXRlQDQgbWFpbl9yZW1vdmVfcm91dGVANSBtYWluX2dldFRydXN0ZWRBcHBfcm91dGVANiBtYWluX2dldFRydXN0ZWRBU0Ffcm91dGVANyBtYWluX2dldEFkamFjZW5jeUxpc3Rfcm91dGVAOAoKbWFpbl9hZnRlcl9pZl9lbHNlQDE1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyMQogICAgLy8gZXhwb3J0IGNsYXNzIFdldHJ1c3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX2dldEFkamFjZW5jeUxpc3Rfcm91dGVAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MTM1CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyMQogICAgLy8gZXhwb3J0IGNsYXNzIFdldHJ1c3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoxMzUKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBnZXRBZGphY2VuY3lMaXN0CiAgICBieXRlYyA1IC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2dldFRydXN0ZWRBU0Ffcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MTMwCiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyMQogICAgLy8gZXhwb3J0IGNsYXNzIFdldHJ1c3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoxMzAKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBnZXRUcnVzdGVkQVNBCiAgICBieXRlYyA1IC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2dldFRydXN0ZWRBcHBfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MTI1CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyMQogICAgLy8gZXhwb3J0IGNsYXNzIFdldHJ1c3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoxMjUKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBnZXRUcnVzdGVkQXBwCiAgICBieXRlYyA1IC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3JlbW92ZV9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czo5MAogICAgLy8gcmVtb3ZlKGFwcDogYXJjNC5VaW50TjY0LCBhc3NldDogYXJjNC5VaW50TjY0LCBwZWVyOiBhcmM0LkFkZHJlc3MpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyMQogICAgLy8gZXhwb3J0IGNsYXNzIFdldHJ1c3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjkwCiAgICAvLyByZW1vdmUoYXBwOiBhcmM0LlVpbnRONjQsIGFzc2V0OiBhcmM0LlVpbnRONjQsIHBlZXI6IGFyYzQuQWRkcmVzcyk6IHZvaWQgewogICAgY2FsbHN1YiByZW1vdmUKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYWRkX3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjQ1CiAgICAvLyBhZGQoYXBwOiBhcmM0LlVpbnRONjQsIGFzc2V0OiBhcmM0LlVpbnRONjQsIHBlZXI6IGFyYzQuQWRkcmVzcyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjIxCiAgICAvLyBleHBvcnQgY2xhc3MgV2V0cnVzdCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6NDUKICAgIC8vIGFkZChhcHA6IGFyYzQuVWludE42NCwgYXNzZXQ6IGFyYzQuVWludE42NCwgcGVlcjogYXJjNC5BZGRyZXNzKTogdm9pZCB7CiAgICBjYWxsc3ViIGFkZAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9pbml0X3JvdXRlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjI4CiAgICAvLyBpbml0KHBheU1icjogZ3R4bi5QYXltZW50VHhuKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjEKICAgIC8vIGV4cG9ydCBjbGFzcyBXZXRydXN0IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjI4CiAgICAvLyBpbml0KHBheU1icjogZ3R4bi5QYXltZW50VHhuKTogdm9pZCB7CiAgICBjYWxsc3ViIGluaXQKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyMQogICAgLy8gZXhwb3J0IGNsYXNzIFdldHJ1c3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDE1CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6OldldHJ1c3QuaW5pdChwYXlNYnI6IHVpbnQ2NCkgLT4gdm9pZDoKaW5pdDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjgKICAgIC8vIGluaXQocGF5TWJyOiBndHhuLlBheW1lbnRUeG4pOiB2b2lkIHsKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czozMC0zMwogICAgLy8gYXNzZXJ0TWF0Y2gocGF5TWJyLCB7CiAgICAvLyAgIHJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgYW1vdW50OiB7IGdyZWF0ZXJUaGFuRXE6IG1iclRvQ292ZXIgfSwKICAgIC8vIH0pOwogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBSZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czozMQogICAgLy8gcmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MzAtMzMKICAgIC8vIGFzc2VydE1hdGNoKHBheU1iciwgewogICAgLy8gICByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgIGFtb3VudDogeyBncmVhdGVyVGhhbkVxOiBtYnJUb0NvdmVyIH0sCiAgICAvLyB9KTsKICAgID09CiAgICBieiBpbml0X2Jvb2xfZmFsc2VAMwogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjkKICAgIC8vIGNvbnN0IG1iclRvQ292ZXI6IHVpbnQ2NCA9IHRoaXMuZ2V0Qm94TWJyKFVJTlQ2NF9CWVRFU19TSVpFKSArIHRoaXMuZ2V0Qm94TWJyKFVJTlQ2NF9CWVRFU19TSVpFKSArIHRoaXMuZ2V0Qm94TWJyKEFERFJFU1NfQllURVNfU0laRSk7CiAgICBwdXNoaW50IDI2NzAwIC8vIDI2NzAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjMwLTMzCiAgICAvLyBhc3NlcnRNYXRjaChwYXlNYnIsIHsKICAgIC8vICAgcmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICBhbW91bnQ6IHsgZ3JlYXRlclRoYW5FcTogbWJyVG9Db3ZlciB9LAogICAgLy8gfSk7CiAgICA+PQogICAgYnogaW5pdF9ib29sX2ZhbHNlQDMKICAgIGludGNfMSAvLyAxCgppbml0X2Jvb2xfbWVyZ2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MzAtMzMKICAgIC8vIGFzc2VydE1hdGNoKHBheU1iciwgewogICAgLy8gICByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgIGFtb3VudDogeyBncmVhdGVyVGhhbkVxOiBtYnJUb0NvdmVyIH0sCiAgICAvLyB9KTsKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjIyCiAgICAvLyB0cnVzdGVkQXBwID0gQm94TWFwPEFjY291bnQsIGFyYzQuRHluYW1pY0FycmF5PGFyYzQuVWludE42ND4+KHsga2V5UHJlZml4OiAidHJ1c3RlZF9hcHAiIH0pOwogICAgYnl0ZWNfMCAvLyAidHJ1c3RlZF9hcHAiCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjM0CiAgICAvLyB0aGlzLnRydXN0ZWRBcHAoVHhuLnNlbmRlcikudmFsdWUgPSBuZXcgYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5VaW50TjY0PigpOwogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyMgogICAgLy8gdHJ1c3RlZEFwcCA9IEJveE1hcDxBY2NvdW50LCBhcmM0LkR5bmFtaWNBcnJheTxhcmM0LlVpbnRONjQ+Pih7IGtleVByZWZpeDogInRydXN0ZWRfYXBwIiB9KTsKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czozNAogICAgLy8gdGhpcy50cnVzdGVkQXBwKFR4bi5zZW5kZXIpLnZhbHVlID0gbmV3IGFyYzQuRHluYW1pY0FycmF5PGFyYzQuVWludE42ND4oKTsKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBieXRlY18zIC8vIDB4MDAwMAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyNAogICAgLy8gdHJ1c3RlZEFTQSA9IEJveE1hcDxBY2NvdW50LCBhcmM0LkR5bmFtaWNBcnJheTxhcmM0LlVpbnRONjQ+Pih7IGtleVByZWZpeDogInRydXN0ZWRfYXNhIiB9KTsKICAgIGJ5dGVjXzEgLy8gInRydXN0ZWRfYXNhIgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czozNQogICAgLy8gdGhpcy50cnVzdGVkQVNBKFR4bi5zZW5kZXIpLnZhbHVlID0gbmV3IGFyYzQuRHluYW1pY0FycmF5PGFyYzQuVWludE42ND4oKTsKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjQKICAgIC8vIHRydXN0ZWRBU0EgPSBCb3hNYXA8QWNjb3VudCwgYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5VaW50TjY0Pj4oeyBrZXlQcmVmaXg6ICJ0cnVzdGVkX2FzYSIgfSk7CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MzUKICAgIC8vIHRoaXMudHJ1c3RlZEFTQShUeG4uc2VuZGVyKS52YWx1ZSA9IG5ldyBhcmM0LkR5bmFtaWNBcnJheTxhcmM0LlVpbnRONjQ+KCk7CiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgYnl0ZWNfMyAvLyAweDAwMDAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjYKICAgIC8vIGFkamFjZW5jeUxpc3QgPSBCb3hNYXA8QWNjb3VudCwgYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5BZGRyZXNzPj4oeyBrZXlQcmVmaXg6ICJhZGphY2VuY3lfbGlzdCIgfSk7IC8vIHRoaXMgb3IgdXNlIGEgZHluYW1pYyBhcnJheSBhcyBhZGphY2VuY3kgbGlzdC4KICAgIGJ5dGVjXzIgLy8gImFkamFjZW5jeV9saXN0IgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czozNgogICAgLy8gdGhpcy5hZGphY2VuY3lMaXN0KFR4bi5zZW5kZXIpLnZhbHVlID0gbmV3IGFyYzQuRHluYW1pY0FycmF5PGFyYzQuQWRkcmVzcz4oKTsKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjYKICAgIC8vIGFkamFjZW5jeUxpc3QgPSBCb3hNYXA8QWNjb3VudCwgYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5BZGRyZXNzPj4oeyBrZXlQcmVmaXg6ICJhZGphY2VuY3lfbGlzdCIgfSk7IC8vIHRoaXMgb3IgdXNlIGEgZHluYW1pYyBhcnJheSBhcyBhZGphY2VuY3kgbGlzdC4KICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czozNgogICAgLy8gdGhpcy5hZGphY2VuY3lMaXN0KFR4bi5zZW5kZXIpLnZhbHVlID0gbmV3IGFyYzQuRHluYW1pY0FycmF5PGFyYzQuQWRkcmVzcz4oKTsKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBieXRlY18zIC8vIDB4MDAwMAogICAgYm94X3B1dAogICAgcmV0c3ViCgppbml0X2Jvb2xfZmFsc2VAMzoKICAgIGludGNfMCAvLyAwCiAgICBiIGluaXRfYm9vbF9tZXJnZUA0CgoKLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czo6V2V0cnVzdC5hZGQoYXBwOiBieXRlcywgYXNzZXQ6IGJ5dGVzLCBwZWVyOiBieXRlcykgLT4gdm9pZDoKYWRkOgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czo0NQogICAgLy8gYWRkKGFwcDogYXJjNC5VaW50TjY0LCBhc3NldDogYXJjNC5VaW50TjY0LCBwZWVyOiBhcmM0LkFkZHJlc3MpOiB2b2lkIHsKICAgIHByb3RvIDMgMAogICAgaW50Y18wIC8vIDAKICAgIGR1cG4gMgogICAgcHVzaGJ5dGVzICIiCiAgICBkdXBuIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6NDYKICAgIC8vIGlmIChhcHAgIT09IG5ldyBVaW50TjY0KDApKSB7CiAgICBmcmFtZV9kaWcgLTMKICAgIGJ5dGVjIDQgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAhPQogICAgYnogYWRkX2FmdGVyX2lmX2Vsc2VANQogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyMgogICAgLy8gdHJ1c3RlZEFwcCA9IEJveE1hcDxBY2NvdW50LCBhcmM0LkR5bmFtaWNBcnJheTxhcmM0LlVpbnRONjQ+Pih7IGtleVByZWZpeDogInRydXN0ZWRfYXBwIiB9KTsKICAgIGJ5dGVjXzAgLy8gInRydXN0ZWRfYXBwIgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czo0NwogICAgLy8gYXNzZXJ0TWF0Y2godGhpcy50cnVzdGVkQXBwKFR4bi5zZW5kZXIpLCB7IGV4aXN0czogdHJ1ZSB9LCAidHJ1c3RlZEFwcExpc3Qgc2hvdWxkIGV4aXN0LCBjYWxsIGluaXQgZmlyc3QiKTsKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHRydXN0ZWRBcHAgPSBCb3hNYXA8QWNjb3VudCwgYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5VaW50TjY0Pj4oeyBrZXlQcmVmaXg6ICJ0cnVzdGVkX2FwcCIgfSk7CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6NDcKICAgIC8vIGFzc2VydE1hdGNoKHRoaXMudHJ1c3RlZEFwcChUeG4uc2VuZGVyKSwgeyBleGlzdHM6IHRydWUgfSwgInRydXN0ZWRBcHBMaXN0IHNob3VsZCBleGlzdCwgY2FsbCBpbml0IGZpcnN0Iik7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGludGNfMSAvLyAxCiAgICA9PQogICAgYXNzZXJ0IC8vIHRydXN0ZWRBcHBMaXN0IHNob3VsZCBleGlzdCwgY2FsbCBpbml0IGZpcnN0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjIyCiAgICAvLyB0cnVzdGVkQXBwID0gQm94TWFwPEFjY291bnQsIGFyYzQuRHluYW1pY0FycmF5PGFyYzQuVWludE42ND4+KHsga2V5UHJlZml4OiAidHJ1c3RlZF9hcHAiIH0pOwogICAgYnl0ZWNfMCAvLyAidHJ1c3RlZF9hcHAiCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjQ4CiAgICAvLyBsZXQgdHJ1c3RlZEFwcExpc3QgPSB0aGlzLnRydXN0ZWRBcHAoVHhuLnNlbmRlcikudmFsdWUuY29weSgpOwogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyMgogICAgLy8gdHJ1c3RlZEFwcCA9IEJveE1hcDxBY2NvdW50LCBhcmM0LkR5bmFtaWNBcnJheTxhcmM0LlVpbnRONjQ+Pih7IGtleVByZWZpeDogInRydXN0ZWRfYXBwIiB9KTsKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czo0OAogICAgLy8gbGV0IHRydXN0ZWRBcHBMaXN0ID0gdGhpcy50cnVzdGVkQXBwKFR4bi5zZW5kZXIpLnZhbHVlLmNvcHkoKTsKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGR1cAogICAgY292ZXIgMgogICAgZnJhbWVfYnVyeSAyCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czo0OS01NQogICAgLy8gYXNzZXJ0TWF0Y2goCiAgICAvLyAgIHRydXN0ZWRBcHBMaXN0LAogICAgLy8gICB7CiAgICAvLyAgICAgbGVuZ3RoOiB7IGxlc3NUaGFuRXE6IHRoaXMuZ2V0TWF4TGVuZ3RoKFVJTlQ2NF9CWVRFU19TSVpFKSB9LAogICAgLy8gICB9LAogICAgLy8gICAibWF4IG51bWJlciBvZiBBcHAgcmVhY2hlZCIKICAgIC8vICk7CiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MTQ3CiAgICAvLyByZXR1cm4gTUFYX0JPWF9TSVpFIC8gaXRlbVNpemU7CiAgICBwdXNoaW50IDEyOCAvLyAxMjgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6NDktNTUKICAgIC8vIGFzc2VydE1hdGNoKAogICAgLy8gICB0cnVzdGVkQXBwTGlzdCwKICAgIC8vICAgewogICAgLy8gICAgIGxlbmd0aDogeyBsZXNzVGhhbkVxOiB0aGlzLmdldE1heExlbmd0aChVSU5UNjRfQllURVNfU0laRSkgfSwKICAgIC8vICAgfSwKICAgIC8vICAgIm1heCBudW1iZXIgb2YgQXBwIHJlYWNoZWQiCiAgICAvLyApOwogICAgPD0KICAgIGFzc2VydCAvLyBtYXggbnVtYmVyIG9mIEFwcCByZWFjaGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjU2CiAgICAvLyBmb3IgKGxldCBqOiB1aW50NjQgPSAwOyBqIDwgdHJ1c3RlZEFwcExpc3QubGVuZ3RoOyBqICs9IDEpIHsKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9idXJ5IDMKCmFkZF93aGlsZV90b3BAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6NTYKICAgIC8vIGZvciAobGV0IGo6IHVpbnQ2NCA9IDA7IGogPCB0cnVzdGVkQXBwTGlzdC5sZW5ndGg7IGogKz0gMSkgewogICAgZnJhbWVfZGlnIDIKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZnJhbWVfZGlnIDMKICAgID4KICAgIGJ6IGFkZF9hZnRlcl93aGlsZUA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjU3CiAgICAvLyBjb25zdCBhcHAgPSB0cnVzdGVkQXBwTGlzdFtqXTsKICAgIGZyYW1lX2RpZyAyCiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDMKICAgIGR1cAogICAgY292ZXIgMgogICAgaW50Y18yIC8vIDgKICAgICoKICAgIGRpZyAxCiAgICBzd2FwCiAgICBpbnRjXzIgLy8gOAogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjU4CiAgICAvLyB0cnVzdGVkQXBwTGlzdC5wdXNoKGFwcCk7CiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gOAogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjU2CiAgICAvLyBmb3IgKGxldCBqOiB1aW50NjQgPSAwOyBqIDwgdHJ1c3RlZEFwcExpc3QubGVuZ3RoOyBqICs9IDEpIHsKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDMKICAgIGIgYWRkX3doaWxlX3RvcEAyCgphZGRfYWZ0ZXJfd2hpbGVANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHRydXN0ZWRBcHAgPSBCb3hNYXA8QWNjb3VudCwgYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5VaW50TjY0Pj4oeyBrZXlQcmVmaXg6ICJ0cnVzdGVkX2FwcCIgfSk7CiAgICBieXRlY18wIC8vICJ0cnVzdGVkX2FwcCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6NjAKICAgIC8vIHRoaXMudHJ1c3RlZEFwcChUeG4uc2VuZGVyKS52YWx1ZSA9IHRydXN0ZWRBcHBMaXN0LmNvcHkoKTsKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHRydXN0ZWRBcHAgPSBCb3hNYXA8QWNjb3VudCwgYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5VaW50TjY0Pj4oeyBrZXlQcmVmaXg6ICJ0cnVzdGVkX2FwcCIgfSk7CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6NjAKICAgIC8vIHRoaXMudHJ1c3RlZEFwcChUeG4uc2VuZGVyKS52YWx1ZSA9IHRydXN0ZWRBcHBMaXN0LmNvcHkoKTsKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBmcmFtZV9kaWcgMgogICAgYm94X3B1dAoKYWRkX2FmdGVyX2lmX2Vsc2VANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6NjMKICAgIC8vIGlmIChhc3NldCAhPT0gbmV3IFVpbnRONjQoMCkpIHsKICAgIGZyYW1lX2RpZyAtMgogICAgYnl0ZWMgNCAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgICE9CiAgICBieiBhZGRfYWZ0ZXJfaWZfZWxzZUAxMAogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyNAogICAgLy8gdHJ1c3RlZEFTQSA9IEJveE1hcDxBY2NvdW50LCBhcmM0LkR5bmFtaWNBcnJheTxhcmM0LlVpbnRONjQ+Pih7IGtleVByZWZpeDogInRydXN0ZWRfYXNhIiB9KTsKICAgIGJ5dGVjXzEgLy8gInRydXN0ZWRfYXNhIgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czo2NAogICAgLy8gYXNzZXJ0TWF0Y2godGhpcy50cnVzdGVkQVNBKFR4bi5zZW5kZXIpLCB7IGV4aXN0czogdHJ1ZSB9LCAidHJ1c3RlZEFTQWxpc3Qgc2hvdWxkIGV4aXN0LCBjYWxsIGluaXQgZmlyc3QiKTsKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjQKICAgIC8vIHRydXN0ZWRBU0EgPSBCb3hNYXA8QWNjb3VudCwgYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5VaW50TjY0Pj4oeyBrZXlQcmVmaXg6ICJ0cnVzdGVkX2FzYSIgfSk7CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6NjQKICAgIC8vIGFzc2VydE1hdGNoKHRoaXMudHJ1c3RlZEFTQShUeG4uc2VuZGVyKSwgeyBleGlzdHM6IHRydWUgfSwgInRydXN0ZWRBU0FsaXN0IHNob3VsZCBleGlzdCwgY2FsbCBpbml0IGZpcnN0Iik7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGludGNfMSAvLyAxCiAgICA9PQogICAgYXNzZXJ0IC8vIHRydXN0ZWRBU0FsaXN0IHNob3VsZCBleGlzdCwgY2FsbCBpbml0IGZpcnN0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjI0CiAgICAvLyB0cnVzdGVkQVNBID0gQm94TWFwPEFjY291bnQsIGFyYzQuRHluYW1pY0FycmF5PGFyYzQuVWludE42ND4+KHsga2V5UHJlZml4OiAidHJ1c3RlZF9hc2EiIH0pOwogICAgYnl0ZWNfMSAvLyAidHJ1c3RlZF9hc2EiCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjY1CiAgICAvLyBsZXQgdHJ1c3RlZEFTQWxpc3QgPSB0aGlzLnRydXN0ZWRBU0EoVHhuLnNlbmRlcikudmFsdWUuY29weSgpOwogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyNAogICAgLy8gdHJ1c3RlZEFTQSA9IEJveE1hcDxBY2NvdW50LCBhcmM0LkR5bmFtaWNBcnJheTxhcmM0LlVpbnRONjQ+Pih7IGtleVByZWZpeDogInRydXN0ZWRfYXNhIiB9KTsKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czo2NQogICAgLy8gbGV0IHRydXN0ZWRBU0FsaXN0ID0gdGhpcy50cnVzdGVkQVNBKFR4bi5zZW5kZXIpLnZhbHVlLmNvcHkoKTsKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGR1cAogICAgY292ZXIgMgogICAgZnJhbWVfYnVyeSAxCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czo2Ni02OAogICAgLy8gYXNzZXJ0TWF0Y2godHJ1c3RlZEFTQWxpc3QsIHsKICAgIC8vICAgbGVuZ3RoOiB7IGxlc3NUaGFuRXE6IHRoaXMuZ2V0TWF4TGVuZ3RoKFVJTlQ2NF9CWVRFU19TSVpFKSB9LAogICAgLy8gfSk7CiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MTQ3CiAgICAvLyByZXR1cm4gTUFYX0JPWF9TSVpFIC8gaXRlbVNpemU7CiAgICBwdXNoaW50IDEyOCAvLyAxMjgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6NjYtNjgKICAgIC8vIGFzc2VydE1hdGNoKHRydXN0ZWRBU0FsaXN0LCB7CiAgICAvLyAgIGxlbmd0aDogeyBsZXNzVGhhbkVxOiB0aGlzLmdldE1heExlbmd0aChVSU5UNjRfQllURVNfU0laRSkgfSwKICAgIC8vIH0pOwogICAgPD0KICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjY5CiAgICAvLyBmb3IgKGxldCBqOiB1aW50NjQgPSAwOyBqIDwgdHJ1c3RlZEFTQWxpc3QubGVuZ3RoOyBqICs9IDEpIHsKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9idXJ5IDQKCmFkZF93aGlsZV90b3BANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6NjkKICAgIC8vIGZvciAobGV0IGo6IHVpbnQ2NCA9IDA7IGogPCB0cnVzdGVkQVNBbGlzdC5sZW5ndGg7IGogKz0gMSkgewogICAgZnJhbWVfZGlnIDEKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZnJhbWVfZGlnIDQKICAgID4KICAgIGJ6IGFkZF9hZnRlcl93aGlsZUA5CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjcwCiAgICAvLyBjb25zdCBhc3NldCA9IHRydXN0ZWRBU0FsaXN0W2pdOwogICAgZnJhbWVfZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgNAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjXzIgLy8gOAogICAgKgogICAgZGlnIDEKICAgIHN3YXAKICAgIGludGNfMiAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6NzEKICAgIC8vIHRydXN0ZWRBU0FsaXN0LnB1c2goYXNzZXQpOwogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDgKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czo2OQogICAgLy8gZm9yIChsZXQgajogdWludDY0ID0gMDsgaiA8IHRydXN0ZWRBU0FsaXN0Lmxlbmd0aDsgaiArPSAxKSB7CiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSA0CiAgICBiIGFkZF93aGlsZV90b3BANwoKYWRkX2FmdGVyX3doaWxlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjI0CiAgICAvLyB0cnVzdGVkQVNBID0gQm94TWFwPEFjY291bnQsIGFyYzQuRHluYW1pY0FycmF5PGFyYzQuVWludE42ND4+KHsga2V5UHJlZml4OiAidHJ1c3RlZF9hc2EiIH0pOwogICAgYnl0ZWNfMSAvLyAidHJ1c3RlZF9hc2EiCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjczCiAgICAvLyB0aGlzLnRydXN0ZWRBU0EoVHhuLnNlbmRlcikudmFsdWUgPSB0cnVzdGVkQVNBbGlzdC5jb3B5KCk7CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjI0CiAgICAvLyB0cnVzdGVkQVNBID0gQm94TWFwPEFjY291bnQsIGFyYzQuRHluYW1pY0FycmF5PGFyYzQuVWludE42ND4+KHsga2V5UHJlZml4OiAidHJ1c3RlZF9hc2EiIH0pOwogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjczCiAgICAvLyB0aGlzLnRydXN0ZWRBU0EoVHhuLnNlbmRlcikudmFsdWUgPSB0cnVzdGVkQVNBbGlzdC5jb3B5KCk7CiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgZnJhbWVfZGlnIDEKICAgIGJveF9wdXQKCmFkZF9hZnRlcl9pZl9lbHNlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czo3NgogICAgLy8gaWYgKHBlZXIgIT09IG5ldyBhcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9BZGRyZXNzKSkgewogICAgZnJhbWVfZGlnIC0xCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBieiBhZGRfYWZ0ZXJfaWZfZWxzZUAxNQogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyNgogICAgLy8gYWRqYWNlbmN5TGlzdCA9IEJveE1hcDxBY2NvdW50LCBhcmM0LkR5bmFtaWNBcnJheTxhcmM0LkFkZHJlc3M+Pih7IGtleVByZWZpeDogImFkamFjZW5jeV9saXN0IiB9KTsgLy8gdGhpcyBvciB1c2UgYSBkeW5hbWljIGFycmF5IGFzIGFkamFjZW5jeSBsaXN0LgogICAgYnl0ZWNfMiAvLyAiYWRqYWNlbmN5X2xpc3QiCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjc3CiAgICAvLyBhc3NlcnRNYXRjaCh0aGlzLmFkamFjZW5jeUxpc3QoVHhuLnNlbmRlciksIHsgZXhpc3RzOiB0cnVlIH0sICJhZGphY2VuY3lMaXN0IHNob3VsZCBleGlzdCwgY2FsbCBpbml0IGZpcnN0Iik7CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjI2CiAgICAvLyBhZGphY2VuY3lMaXN0ID0gQm94TWFwPEFjY291bnQsIGFyYzQuRHluYW1pY0FycmF5PGFyYzQuQWRkcmVzcz4+KHsga2V5UHJlZml4OiAiYWRqYWNlbmN5X2xpc3QiIH0pOyAvLyB0aGlzIG9yIHVzZSBhIGR5bmFtaWMgYXJyYXkgYXMgYWRqYWNlbmN5IGxpc3QuCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6NzcKICAgIC8vIGFzc2VydE1hdGNoKHRoaXMuYWRqYWNlbmN5TGlzdChUeG4uc2VuZGVyKSwgeyBleGlzdHM6IHRydWUgfSwgImFkamFjZW5jeUxpc3Qgc2hvdWxkIGV4aXN0LCBjYWxsIGluaXQgZmlyc3QiKTsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBhc3NlcnQgLy8gYWRqYWNlbmN5TGlzdCBzaG91bGQgZXhpc3QsIGNhbGwgaW5pdCBmaXJzdAogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyNgogICAgLy8gYWRqYWNlbmN5TGlzdCA9IEJveE1hcDxBY2NvdW50LCBhcmM0LkR5bmFtaWNBcnJheTxhcmM0LkFkZHJlc3M+Pih7IGtleVByZWZpeDogImFkamFjZW5jeV9saXN0IiB9KTsgLy8gdGhpcyBvciB1c2UgYSBkeW5hbWljIGFycmF5IGFzIGFkamFjZW5jeSBsaXN0LgogICAgYnl0ZWNfMiAvLyAiYWRqYWNlbmN5X2xpc3QiCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjc4CiAgICAvLyBsZXQgYWRqYWNlbmN5TGlzdCA9IHRoaXMuYWRqYWNlbmN5TGlzdChUeG4uc2VuZGVyKS52YWx1ZS5jb3B5KCk7CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjI2CiAgICAvLyBhZGphY2VuY3lMaXN0ID0gQm94TWFwPEFjY291bnQsIGFyYzQuRHluYW1pY0FycmF5PGFyYzQuQWRkcmVzcz4+KHsga2V5UHJlZml4OiAiYWRqYWNlbmN5X2xpc3QiIH0pOyAvLyB0aGlzIG9yIHVzZSBhIGR5bmFtaWMgYXJyYXkgYXMgYWRqYWNlbmN5IGxpc3QuCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6NzgKICAgIC8vIGxldCBhZGphY2VuY3lMaXN0ID0gdGhpcy5hZGphY2VuY3lMaXN0KFR4bi5zZW5kZXIpLnZhbHVlLmNvcHkoKTsKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGR1cAogICAgY292ZXIgMgogICAgZnJhbWVfYnVyeSAwCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czo3OS04MQogICAgLy8gYXNzZXJ0TWF0Y2goYWRqYWNlbmN5TGlzdCwgewogICAgLy8gICBsZW5ndGg6IHsgbGVzc1RoYW5FcTogdGhpcy5nZXRNYXhMZW5ndGgoQUREUkVTU19CWVRFU19TSVpFKSB9LAogICAgLy8gfSk7CiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MTQ3CiAgICAvLyByZXR1cm4gTUFYX0JPWF9TSVpFIC8gaXRlbVNpemU7CiAgICBpbnRjXzMgLy8gMzIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6NzktODEKICAgIC8vIGFzc2VydE1hdGNoKGFkamFjZW5jeUxpc3QsIHsKICAgIC8vICAgbGVuZ3RoOiB7IGxlc3NUaGFuRXE6IHRoaXMuZ2V0TWF4TGVuZ3RoKEFERFJFU1NfQllURVNfU0laRSkgfSwKICAgIC8vIH0pOwogICAgPD0KICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjgyCiAgICAvLyBmb3IgKGxldCBqOiB1aW50NjQgPSAwOyBqIDwgYWRqYWNlbmN5TGlzdC5sZW5ndGg7IGogKz0gMSkgewogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgNQoKYWRkX3doaWxlX3RvcEAxMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6ODIKICAgIC8vIGZvciAobGV0IGo6IHVpbnQ2NCA9IDA7IGogPCBhZGphY2VuY3lMaXN0Lmxlbmd0aDsgaiArPSAxKSB7CiAgICBmcmFtZV9kaWcgMAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBmcmFtZV9kaWcgNQogICAgPgogICAgYnogYWRkX2FmdGVyX3doaWxlQDE0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjgzCiAgICAvLyBjb25zdCBwZWVyID0gYWRqYWNlbmN5TGlzdFtqXTsKICAgIGZyYW1lX2RpZyAwCiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDUKICAgIGR1cAogICAgY292ZXIgMgogICAgaW50Y18zIC8vIDMyCiAgICAqCiAgICBkaWcgMQogICAgc3dhcAogICAgaW50Y18zIC8vIDMyCiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6ODQKICAgIC8vIGFkamFjZW5jeUxpc3QucHVzaChwZWVyKTsKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIGludGNfMyAvLyAzMgogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjgyCiAgICAvLyBmb3IgKGxldCBqOiB1aW50NjQgPSAwOyBqIDwgYWRqYWNlbmN5TGlzdC5sZW5ndGg7IGogKz0gMSkgewogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgNQogICAgYiBhZGRfd2hpbGVfdG9wQDEyCgphZGRfYWZ0ZXJfd2hpbGVAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjI2CiAgICAvLyBhZGphY2VuY3lMaXN0ID0gQm94TWFwPEFjY291bnQsIGFyYzQuRHluYW1pY0FycmF5PGFyYzQuQWRkcmVzcz4+KHsga2V5UHJlZml4OiAiYWRqYWNlbmN5X2xpc3QiIH0pOyAvLyB0aGlzIG9yIHVzZSBhIGR5bmFtaWMgYXJyYXkgYXMgYWRqYWNlbmN5IGxpc3QuCiAgICBieXRlY18yIC8vICJhZGphY2VuY3lfbGlzdCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6ODYKICAgIC8vIHRoaXMuYWRqYWNlbmN5TGlzdChUeG4uc2VuZGVyKS52YWx1ZSA9IGFkamFjZW5jeUxpc3QuY29weSgpOwogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyNgogICAgLy8gYWRqYWNlbmN5TGlzdCA9IEJveE1hcDxBY2NvdW50LCBhcmM0LkR5bmFtaWNBcnJheTxhcmM0LkFkZHJlc3M+Pih7IGtleVByZWZpeDogImFkamFjZW5jeV9saXN0IiB9KTsgLy8gdGhpcyBvciB1c2UgYSBkeW5hbWljIGFycmF5IGFzIGFkamFjZW5jeSBsaXN0LgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjg2CiAgICAvLyB0aGlzLmFkamFjZW5jeUxpc3QoVHhuLnNlbmRlcikudmFsdWUgPSBhZGphY2VuY3lMaXN0LmNvcHkoKTsKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBmcmFtZV9kaWcgMAogICAgYm94X3B1dAoKYWRkX2FmdGVyX2lmX2Vsc2VAMTU6CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjpXZXRydXN0LnJlbW92ZShhcHA6IGJ5dGVzLCBhc3NldDogYnl0ZXMsIHBlZXI6IGJ5dGVzKSAtPiB2b2lkOgpyZW1vdmU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjkwCiAgICAvLyByZW1vdmUoYXBwOiBhcmM0LlVpbnRONjQsIGFzc2V0OiBhcmM0LlVpbnRONjQsIHBlZXI6IGFyYzQuQWRkcmVzcyk6IHZvaWQgewogICAgcHJvdG8gMyAwCiAgICBpbnRjXzAgLy8gMAogICAgZHVwbiAxMQogICAgcHVzaGJ5dGVzICIiCiAgICBkdXBuIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6OTEKICAgIC8vIGlmIChhcHAgIT09IG5ldyBhcmM0LlVpbnRONjQoMCkpIHsKICAgIGZyYW1lX2RpZyAtMwogICAgYnl0ZWMgNCAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgICE9CiAgICBieiByZW1vdmVfYWZ0ZXJfaWZfZWxzZUA3CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjIyCiAgICAvLyB0cnVzdGVkQXBwID0gQm94TWFwPEFjY291bnQsIGFyYzQuRHluYW1pY0FycmF5PGFyYzQuVWludE42ND4+KHsga2V5UHJlZml4OiAidHJ1c3RlZF9hcHAiIH0pOwogICAgYnl0ZWNfMCAvLyAidHJ1c3RlZF9hcHAiCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjkyCiAgICAvLyBjb25zdCBhcHBMaXN0ID0gdGhpcy50cnVzdGVkQXBwKFR4bi5zZW5kZXIpLnZhbHVlLmNvcHkoKTsKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHRydXN0ZWRBcHAgPSBCb3hNYXA8QWNjb3VudCwgYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5VaW50TjY0Pj4oeyBrZXlQcmVmaXg6ICJ0cnVzdGVkX2FwcCIgfSk7CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6OTIKICAgIC8vIGNvbnN0IGFwcExpc3QgPSB0aGlzLnRydXN0ZWRBcHAoVHhuLnNlbmRlcikudmFsdWUuY29weSgpOwogICAgYm94X2dldAogICAgc3dhcAogICAgZnJhbWVfYnVyeSAwCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czo5MwogICAgLy8gbGV0IG5ld0xpc3QgPSBuZXcgYXJjNC5EeW5hbWljQXJyYXk8VWludE42ND4oKTsKICAgIGJ5dGVjXzMgLy8gMHgwMDAwCiAgICBmcmFtZV9idXJ5IDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6OTQKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDA7IGkgPCBhcHBMaXN0Lmxlbmd0aDsgaSArPSAxKSB7CiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSAxMgoKcmVtb3ZlX3doaWxlX3RvcEAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czo5NAogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IGFwcExpc3QubGVuZ3RoOyBpICs9IDEpIHsKICAgIGZyYW1lX2RpZyAwCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGZyYW1lX2RpZyAxMgogICAgPgogICAgYnogcmVtb3ZlX2FmdGVyX3doaWxlQDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6OTUKICAgIC8vIGlmIChhcHBMaXN0W2ldICE9PSBhcHApIHsKICAgIGZyYW1lX2RpZyAwCiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDEyCiAgICBpbnRjXzIgLy8gOAogICAgKgogICAgaW50Y18yIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDExCiAgICBmcmFtZV9kaWcgLTMKICAgICE9CiAgICBmcmFtZV9kaWcgMgogICAgZnJhbWVfYnVyeSAzCiAgICBieiByZW1vdmVfYWZ0ZXJfaWZfZWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjk2CiAgICAvLyBuZXdMaXN0LnB1c2goYXBwTGlzdFtpXSk7CiAgICBmcmFtZV9kaWcgMgogICAgZXh0cmFjdCAyIDAKICAgIGZyYW1lX2RpZyAxMQogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDgKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgMwoKcmVtb3ZlX2FmdGVyX2lmX2Vsc2VANToKICAgIGZyYW1lX2RpZyAzCiAgICBmcmFtZV9idXJ5IDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6OTQKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDA7IGkgPCBhcHBMaXN0Lmxlbmd0aDsgaSArPSAxKSB7CiAgICBmcmFtZV9kaWcgMTIKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDEyCiAgICBiIHJlbW92ZV93aGlsZV90b3BAMgoKcmVtb3ZlX2FmdGVyX3doaWxlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjIyCiAgICAvLyB0cnVzdGVkQXBwID0gQm94TWFwPEFjY291bnQsIGFyYzQuRHluYW1pY0FycmF5PGFyYzQuVWludE42ND4+KHsga2V5UHJlZml4OiAidHJ1c3RlZF9hcHAiIH0pOwogICAgYnl0ZWNfMCAvLyAidHJ1c3RlZF9hcHAiCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjk5CiAgICAvLyB0aGlzLnRydXN0ZWRBcHAoVHhuLnNlbmRlcikudmFsdWUgPSBuZXdMaXN0LmNvcHkoKTsKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHRydXN0ZWRBcHAgPSBCb3hNYXA8QWNjb3VudCwgYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5VaW50TjY0Pj4oeyBrZXlQcmVmaXg6ICJ0cnVzdGVkX2FwcCIgfSk7CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6OTkKICAgIC8vIHRoaXMudHJ1c3RlZEFwcChUeG4uc2VuZGVyKS52YWx1ZSA9IG5ld0xpc3QuY29weSgpOwogICAgZHVwCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGZyYW1lX2RpZyAyCiAgICBib3hfcHV0CgpyZW1vdmVfYWZ0ZXJfaWZfZWxzZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoxMDEKICAgIC8vIGlmIChhc3NldCAhPT0gbmV3IGFyYzQuVWludE42NCgwKSkgewogICAgZnJhbWVfZGlnIC0yCiAgICBieXRlYyA0IC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgIT0KICAgIGJ6IHJlbW92ZV9hZnRlcl9pZl9lbHNlQDE0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjI0CiAgICAvLyB0cnVzdGVkQVNBID0gQm94TWFwPEFjY291bnQsIGFyYzQuRHluYW1pY0FycmF5PGFyYzQuVWludE42ND4+KHsga2V5UHJlZml4OiAidHJ1c3RlZF9hc2EiIH0pOwogICAgYnl0ZWNfMSAvLyAidHJ1c3RlZF9hc2EiCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjEwMgogICAgLy8gY29uc3QgYXNzZXRMaXN0ID0gdGhpcy50cnVzdGVkQVNBKFR4bi5zZW5kZXIpLnZhbHVlLmNvcHkoKTsKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjQKICAgIC8vIHRydXN0ZWRBU0EgPSBCb3hNYXA8QWNjb3VudCwgYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5VaW50TjY0Pj4oeyBrZXlQcmVmaXg6ICJ0cnVzdGVkX2FzYSIgfSk7CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MTAyCiAgICAvLyBjb25zdCBhc3NldExpc3QgPSB0aGlzLnRydXN0ZWRBU0EoVHhuLnNlbmRlcikudmFsdWUuY29weSgpOwogICAgYm94X2dldAogICAgc3dhcAogICAgZnJhbWVfYnVyeSAxCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoxMDMKICAgIC8vIGxldCBuZXdMaXN0ID0gbmV3IGFyYzQuRHluYW1pY0FycmF5PFVpbnRONjQ+KCk7CiAgICBieXRlY18zIC8vIDB4MDAwMAogICAgZnJhbWVfYnVyeSA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjEwNAogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IGFzc2V0TGlzdC5sZW5ndGg7IGkgKz0gMSkgewogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgMTMKCnJlbW92ZV93aGlsZV90b3BAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MTA0CiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAwOyBpIDwgYXNzZXRMaXN0Lmxlbmd0aDsgaSArPSAxKSB7CiAgICBmcmFtZV9kaWcgMQogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBmcmFtZV9kaWcgMTMKICAgID4KICAgIGJ6IHJlbW92ZV9hZnRlcl93aGlsZUAxMwogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoxMDUKICAgIC8vIGlmIChhc3NldExpc3RbaV0gIT09IGFzc2V0KSB7CiAgICBmcmFtZV9kaWcgMQogICAgZXh0cmFjdCAyIDAKICAgIGZyYW1lX2RpZyAxMwogICAgaW50Y18yIC8vIDgKICAgICoKICAgIGludGNfMiAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGR1cAogICAgZnJhbWVfYnVyeSA5CiAgICBmcmFtZV9kaWcgLTIKICAgICE9CiAgICBmcmFtZV9kaWcgNAogICAgZnJhbWVfYnVyeSA1CiAgICBieiByZW1vdmVfYWZ0ZXJfaWZfZWxzZUAxMgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoxMDYKICAgIC8vIG5ld0xpc3QucHVzaChhc3NldExpc3RbaV0pOwogICAgZnJhbWVfZGlnIDQKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgOQogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDgKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgNQoKcmVtb3ZlX2FmdGVyX2lmX2Vsc2VAMTI6CiAgICBmcmFtZV9kaWcgNQogICAgZnJhbWVfYnVyeSA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjEwNAogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IGFzc2V0TGlzdC5sZW5ndGg7IGkgKz0gMSkgewogICAgZnJhbWVfZGlnIDEzCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAxMwogICAgYiByZW1vdmVfd2hpbGVfdG9wQDkKCnJlbW92ZV9hZnRlcl93aGlsZUAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjQKICAgIC8vIHRydXN0ZWRBU0EgPSBCb3hNYXA8QWNjb3VudCwgYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5VaW50TjY0Pj4oeyBrZXlQcmVmaXg6ICJ0cnVzdGVkX2FzYSIgfSk7CiAgICBieXRlY18xIC8vICJ0cnVzdGVkX2FzYSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MTA5CiAgICAvLyB0aGlzLnRydXN0ZWRBU0EoVHhuLnNlbmRlcikudmFsdWUgPSBuZXdMaXN0LmNvcHkoKTsKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjQKICAgIC8vIHRydXN0ZWRBU0EgPSBCb3hNYXA8QWNjb3VudCwgYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5VaW50TjY0Pj4oeyBrZXlQcmVmaXg6ICJ0cnVzdGVkX2FzYSIgfSk7CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MTA5CiAgICAvLyB0aGlzLnRydXN0ZWRBU0EoVHhuLnNlbmRlcikudmFsdWUgPSBuZXdMaXN0LmNvcHkoKTsKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBmcmFtZV9kaWcgNAogICAgYm94X3B1dAoKcmVtb3ZlX2FmdGVyX2lmX2Vsc2VAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjExMQogICAgLy8gaWYgKHBlZXIgIT09IG5ldyBhcmM0LkFkZHJlc3MoR2xvYmFsLnplcm9BZGRyZXNzKSkgewogICAgZnJhbWVfZGlnIC0xCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBieiByZW1vdmVfYWZ0ZXJfaWZfZWxzZUAyMQogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyNgogICAgLy8gYWRqYWNlbmN5TGlzdCA9IEJveE1hcDxBY2NvdW50LCBhcmM0LkR5bmFtaWNBcnJheTxhcmM0LkFkZHJlc3M+Pih7IGtleVByZWZpeDogImFkamFjZW5jeV9saXN0IiB9KTsgLy8gdGhpcyBvciB1c2UgYSBkeW5hbWljIGFycmF5IGFzIGFkamFjZW5jeSBsaXN0LgogICAgYnl0ZWNfMiAvLyAiYWRqYWNlbmN5X2xpc3QiCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjExMgogICAgLy8gY29uc3QgcGVlckxpc3QgPSB0aGlzLmFkamFjZW5jeUxpc3QoVHhuLnNlbmRlcikudmFsdWUuY29weSgpOwogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyNgogICAgLy8gYWRqYWNlbmN5TGlzdCA9IEJveE1hcDxBY2NvdW50LCBhcmM0LkR5bmFtaWNBcnJheTxhcmM0LkFkZHJlc3M+Pih7IGtleVByZWZpeDogImFkamFjZW5jeV9saXN0IiB9KTsgLy8gdGhpcyBvciB1c2UgYSBkeW5hbWljIGFycmF5IGFzIGFkamFjZW5jeSBsaXN0LgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjExMgogICAgLy8gY29uc3QgcGVlckxpc3QgPSB0aGlzLmFkamFjZW5jeUxpc3QoVHhuLnNlbmRlcikudmFsdWUuY29weSgpOwogICAgYm94X2dldAogICAgc3dhcAogICAgZnJhbWVfYnVyeSA4CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoxMTMKICAgIC8vIGxldCBuZXdMaXN0ID0gbmV3IGFyYzQuRHluYW1pY0FycmF5PGFyYzQuQWRkcmVzcz4oKTsKICAgIGJ5dGVjXzMgLy8gMHgwMDAwCiAgICBmcmFtZV9idXJ5IDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MTE0CiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAwOyBpIDwgcGVlckxpc3QubGVuZ3RoOyBpICs9IDEpIHsKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9idXJ5IDE0CgpyZW1vdmVfd2hpbGVfdG9wQDE2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoxMTQKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDA7IGkgPCBwZWVyTGlzdC5sZW5ndGg7IGkgKz0gMSkgewogICAgZnJhbWVfZGlnIDgKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZnJhbWVfZGlnIDE0CiAgICA+CiAgICBieiByZW1vdmVfYWZ0ZXJfd2hpbGVAMjAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MTE1CiAgICAvLyBpZiAocGVlckxpc3RbaV0gIT09IHBlZXIpIHsKICAgIGZyYW1lX2RpZyA4CiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDE0CiAgICBpbnRjXzMgLy8gMzIKICAgICoKICAgIGludGNfMyAvLyAzMgogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMTAKICAgIGZyYW1lX2RpZyAtMQogICAgIT0KICAgIGZyYW1lX2RpZyA2CiAgICBmcmFtZV9idXJ5IDcKICAgIGJ6IHJlbW92ZV9hZnRlcl9pZl9lbHNlQDE5CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjExNgogICAgLy8gbmV3TGlzdC5wdXNoKHBlZXJMaXN0W2ldKTsKICAgIGZyYW1lX2RpZyA2CiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDEwCiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzMgLy8gMzIKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgNwoKcmVtb3ZlX2FmdGVyX2lmX2Vsc2VAMTk6CiAgICBmcmFtZV9kaWcgNwogICAgZnJhbWVfYnVyeSA2CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjExNAogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IHBlZXJMaXN0Lmxlbmd0aDsgaSArPSAxKSB7CiAgICBmcmFtZV9kaWcgMTQKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDE0CiAgICBiIHJlbW92ZV93aGlsZV90b3BAMTYKCnJlbW92ZV9hZnRlcl93aGlsZUAyMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjYKICAgIC8vIGFkamFjZW5jeUxpc3QgPSBCb3hNYXA8QWNjb3VudCwgYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5BZGRyZXNzPj4oeyBrZXlQcmVmaXg6ICJhZGphY2VuY3lfbGlzdCIgfSk7IC8vIHRoaXMgb3IgdXNlIGEgZHluYW1pYyBhcnJheSBhcyBhZGphY2VuY3kgbGlzdC4KICAgIGJ5dGVjXzIgLy8gImFkamFjZW5jeV9saXN0IgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoxMTkKICAgIC8vIHRoaXMuYWRqYWNlbmN5TGlzdChUeG4uc2VuZGVyKS52YWx1ZSA9IG5ld0xpc3QuY29weSgpOwogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyNgogICAgLy8gYWRqYWNlbmN5TGlzdCA9IEJveE1hcDxBY2NvdW50LCBhcmM0LkR5bmFtaWNBcnJheTxhcmM0LkFkZHJlc3M+Pih7IGtleVByZWZpeDogImFkamFjZW5jeV9saXN0IiB9KTsgLy8gdGhpcyBvciB1c2UgYSBkeW5hbWljIGFycmF5IGFzIGFkamFjZW5jeSBsaXN0LgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjExOQogICAgLy8gdGhpcy5hZGphY2VuY3lMaXN0KFR4bi5zZW5kZXIpLnZhbHVlID0gbmV3TGlzdC5jb3B5KCk7CiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgZnJhbWVfZGlnIDYKICAgIGJveF9wdXQKCnJlbW92ZV9hZnRlcl9pZl9lbHNlQDIxOgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czo6V2V0cnVzdC5nZXRUcnVzdGVkQXBwKGFjY291bnQ6IGJ5dGVzKSAtPiBieXRlczoKZ2V0VHJ1c3RlZEFwcDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MTI1LTEyNgogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICAvLyBnZXRUcnVzdGVkQXBwKGFjY291bnQ6IEFjY291bnQpOiBhcmM0LkR5bmFtaWNBcnJheTxhcmM0LlVpbnRONjQ+IHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoyMgogICAgLy8gdHJ1c3RlZEFwcCA9IEJveE1hcDxBY2NvdW50LCBhcmM0LkR5bmFtaWNBcnJheTxhcmM0LlVpbnRONjQ+Pih7IGtleVByZWZpeDogInRydXN0ZWRfYXBwIiB9KTsKICAgIGJ5dGVjXzAgLy8gInRydXN0ZWRfYXBwIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MTI3CiAgICAvLyByZXR1cm4gdGhpcy50cnVzdGVkQXBwKGFjY291bnQpLnZhbHVlOwogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6OldldHJ1c3QuZ2V0VHJ1c3RlZEFTQShhY2NvdW50OiBieXRlcykgLT4gYnl0ZXM6CmdldFRydXN0ZWRBU0E6CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjEzMC0xMzEKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gZ2V0VHJ1c3RlZEFTQShhY2NvdW50OiBBY2NvdW50KTogYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5VaW50TjY0PiB7CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZXRydXN0L2NvbnRyYWN0LmFsZ28udHM6MjQKICAgIC8vIHRydXN0ZWRBU0EgPSBCb3hNYXA8QWNjb3VudCwgYXJjNC5EeW5hbWljQXJyYXk8YXJjNC5VaW50TjY0Pj4oeyBrZXlQcmVmaXg6ICJ0cnVzdGVkX2FzYSIgfSk7CiAgICBieXRlY18xIC8vICJ0cnVzdGVkX2FzYSIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjEzMgogICAgLy8gcmV0dXJuIHRoaXMudHJ1c3RlZEFTQShhY2NvdW50KS52YWx1ZTsKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjpXZXRydXN0LmdldEFkamFjZW5jeUxpc3QoYWNjb3VudDogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRBZGphY2VuY3lMaXN0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3dldHJ1c3QvY29udHJhY3QuYWxnby50czoxMzUtMTM2CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIC8vIGdldEFkamFjZW5jeUxpc3QoYWNjb3VudDogQWNjb3VudCk6IGFyYzQuRHluYW1pY0FycmF5PGFyYzQuQWRkcmVzcz4gewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjI2CiAgICAvLyBhZGphY2VuY3lMaXN0ID0gQm94TWFwPEFjY291bnQsIGFyYzQuRHluYW1pY0FycmF5PGFyYzQuQWRkcmVzcz4+KHsga2V5UHJlZml4OiAiYWRqYWNlbmN5X2xpc3QiIH0pOyAvLyB0aGlzIG9yIHVzZSBhIGR5bmFtaWMgYXJyYXkgYXMgYWRqYWNlbmN5IGxpc3QuCiAgICBieXRlY18yIC8vICJhZGphY2VuY3lfbGlzdCIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2V0cnVzdC9jb250cmFjdC5hbGdvLnRzOjEzNwogICAgLy8gcmV0dXJuIHRoaXMuYWRqYWNlbmN5TGlzdChhY2NvdW50KS52YWx1ZTsKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEIICYGC3RydXN0ZWRfYXBwC3RydXN0ZWRfYXNhDmFkamFjZW5jeV9saXN0AgAACAAAAAAAAAAABBUffHUxG0EAuIIGBKH7UGsEh6g9/ATvOhIxBIrddNIE2rfuPwQ7ok5/NhoAjgYAcQBcAEcAMAAZAAIiQzEZFEQxGEQ2GgEXwByIAzInBUxQsCNDMRkURDEYRDYaARfAHIgDEScFTFCwI0MxGRREMRhENhoBF8AciALwJwVMULAjQzEZFEQxGEQ2GgE2GgI2GgOIAZ8jQzEZFEQxGEQ2GgE2GgI2GgOIAF4jQzEZFEQxGEQxFiMJSTgQIxJEiAANI0MxGUD/dDEYFEQjQ4oBAIv/OAcyChJBACqL/zgIgczQAQ9BAB4jRCgxAFBJvEgrvykxAFBJvEgrvyoxAFBJvEgrv4kiQv/figMAIkcCgABHAov9JwQTQQBZKDEAUL1FASMSRCgxAFC+TElOAowCRCJZgYABDkQijAOLAiJZiwMNQQAliwJXAgCLA0lOAiQLSwFMJFhQSRUkChZXBgJMUIwCIwiMA0L/0SgxAFBJvEiLAr+L/icEE0EAWSkxAFC9RQEjEkQpMQBQvkxJTgKMAUQiWYGAAQ5EIowEiwEiWYsEDUEAJYsBVwIAiwRJTgIkC0sBTCRYUEkVJAoWVwYCTFCMASMIjARC/9EpMQBQSbxIiwG/i/8yAxNBAFcqMQBQvUUBIxJEKjEAUL5MSU4CjABEIlklDkQijAWLACJZiwUNQQAliwBXAgCLBUlOAiULSwFMJVhQSRUlChZXBgJMUIwAIwiMBUL/0SoxAFBJvEiLAL+JigMAIkcLgABHAov9JwQTQQBcKDEAUL5MjABEK4wCIowMiwAiWYsMDUEAOYsAVwIAiwwkCyRYSYwLi/0TiwKMA0EAFIsCVwIAiwtQSRUkChZXBgJMUIwDiwOMAosMIwiMDEL/vSgxAFBJvEiLAr+L/icEE0EAXCkxAFC+TIwBRCuMBCKMDYsBIlmLDQ1BADmLAVcCAIsNJAskWEmMCYv+E4sEjAVBABSLBFcCAIsJUEkVJAoWVwYCTFCMBYsFjASLDSMIjA1C/70pMQBQSbxIiwS/i/8yAxNBAFwqMQBQvkyMCEQrjAYijA6LCCJZiw4NQQA5iwhXAgCLDiULJVhJjAqL/xOLBowHQQAUiwZXAgCLClBJFSUKFlcGAkxQjAeLB4wGiw4jCIwOQv+9KjEAUEm8SIsGv4mKAQEoi/9QvkSJigEBKYv/UL5EiYoBASqL/1C+RIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}