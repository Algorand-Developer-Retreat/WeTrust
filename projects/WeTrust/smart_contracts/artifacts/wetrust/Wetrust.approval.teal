#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 8 32
    bytecblock "trusted_app" "trusted_asa" "adjacency_list" 0x0000 0x0000000000000000 0x151f7c75
    // smart_contracts/wetrust/contract.algo.ts:19
    // export class Wetrust extends Contract {
    txn NumAppArgs
    bz main_bare_routing@11
    pushbytess 0xa1fb506b 0x87a83dfc 0xef3a1231 0x8add74d2 0xdab7ee3f 0x3ba24e7f // method "init(pay)void", method "add(uint64,uint64,address)void", method "remove(uint64,uint64,address)void", method "getTrustedApp(account)uint64[]", method "getTrustedASA(account)uint64[]", method "getAdjacencyList(account)address[]"
    txna ApplicationArgs 0
    match main_init_route@3 main_add_route@4 main_remove_route@5 main_getTrustedApp_route@6 main_getTrustedASA_route@7 main_getAdjacencyList_route@8

main_after_if_else@15:
    // smart_contracts/wetrust/contract.algo.ts:19
    // export class Wetrust extends Contract {
    intc_0 // 0
    return

main_getAdjacencyList_route@8:
    // smart_contracts/wetrust/contract.algo.ts:123
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/wetrust/contract.algo.ts:19
    // export class Wetrust extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/wetrust/contract.algo.ts:123
    // @abimethod({ readonly: true })
    callsub getAdjacencyList
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getTrustedASA_route@7:
    // smart_contracts/wetrust/contract.algo.ts:118
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/wetrust/contract.algo.ts:19
    // export class Wetrust extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/wetrust/contract.algo.ts:118
    // @abimethod({ readonly: true })
    callsub getTrustedASA
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getTrustedApp_route@6:
    // smart_contracts/wetrust/contract.algo.ts:113
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/wetrust/contract.algo.ts:19
    // export class Wetrust extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/wetrust/contract.algo.ts:113
    // @abimethod({ readonly: true })
    callsub getTrustedApp
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_remove_route@5:
    // smart_contracts/wetrust/contract.algo.ts:78
    // remove(app: arc4.UintN64, asset: arc4.UintN64, peer: arc4.Address): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/wetrust/contract.algo.ts:19
    // export class Wetrust extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/wetrust/contract.algo.ts:78
    // remove(app: arc4.UintN64, asset: arc4.UintN64, peer: arc4.Address): void {
    callsub remove
    intc_1 // 1
    return

main_add_route@4:
    // smart_contracts/wetrust/contract.algo.ts:39
    // add(app: arc4.UintN64, asset: arc4.UintN64, peer: arc4.Address): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/wetrust/contract.algo.ts:19
    // export class Wetrust extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/wetrust/contract.algo.ts:39
    // add(app: arc4.UintN64, asset: arc4.UintN64, peer: arc4.Address): void {
    callsub add
    intc_1 // 1
    return

main_init_route@3:
    // smart_contracts/wetrust/contract.algo.ts:26
    // init(payMbr: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/wetrust/contract.algo.ts:19
    // export class Wetrust extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/wetrust/contract.algo.ts:26
    // init(payMbr: gtxn.PaymentTxn): void {
    callsub init
    intc_1 // 1
    return

main_bare_routing@11:
    // smart_contracts/wetrust/contract.algo.ts:19
    // export class Wetrust extends Contract {
    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/wetrust/contract.algo.ts::Wetrust.init(payMbr: uint64) -> void:
init:
    // smart_contracts/wetrust/contract.algo.ts:26
    // init(payMbr: gtxn.PaymentTxn): void {
    proto 1 0
    // smart_contracts/wetrust/contract.algo.ts:27-30
    // assertMatch(payMbr, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: { greaterThanEq: 104500 },
    // });
    frame_dig -1
    gtxns Receiver
    // smart_contracts/wetrust/contract.algo.ts:28
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/wetrust/contract.algo.ts:27-30
    // assertMatch(payMbr, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: { greaterThanEq: 104500 },
    // });
    ==
    bz init_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/wetrust/contract.algo.ts:29
    // amount: { greaterThanEq: 104500 },
    pushint 104500 // 104500
    // smart_contracts/wetrust/contract.algo.ts:27-30
    // assertMatch(payMbr, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: { greaterThanEq: 104500 },
    // });
    >=
    bz init_bool_false@3
    intc_1 // 1

init_bool_merge@4:
    // smart_contracts/wetrust/contract.algo.ts:27-30
    // assertMatch(payMbr, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: { greaterThanEq: 104500 },
    // });
    assert // assert target is match for conditions
    retsub

init_bool_false@3:
    intc_0 // 0
    b init_bool_merge@4


// smart_contracts/wetrust/contract.algo.ts::Wetrust.add(app: bytes, asset: bytes, peer: bytes) -> void:
add:
    // smart_contracts/wetrust/contract.algo.ts:39
    // add(app: arc4.UintN64, asset: arc4.UintN64, peer: arc4.Address): void {
    proto 3 0
    intc_0 // 0
    dupn 2
    pushbytes ""
    dupn 2
    // smart_contracts/wetrust/contract.algo.ts:20
    // trustedApp = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_app" });
    bytec_0 // "trusted_app"
    // smart_contracts/wetrust/contract.algo.ts:40
    // if (!this.trustedApp(Txn.sender).exists) {
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:20
    // trustedApp = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_app" });
    concat
    // smart_contracts/wetrust/contract.algo.ts:40
    // if (!this.trustedApp(Txn.sender).exists) {
    box_len
    bury 1
    bnz add_after_if_else@2
    // smart_contracts/wetrust/contract.algo.ts:20
    // trustedApp = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_app" });
    bytec_0 // "trusted_app"
    // smart_contracts/wetrust/contract.algo.ts:41
    // this.trustedApp(Txn.sender).value = new arc4.DynamicArray<arc4.UintN64>();
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:20
    // trustedApp = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_app" });
    concat
    // smart_contracts/wetrust/contract.algo.ts:41
    // this.trustedApp(Txn.sender).value = new arc4.DynamicArray<arc4.UintN64>();
    dup
    box_del
    pop
    bytec_3 // 0x0000
    box_put

add_after_if_else@2:
    // smart_contracts/wetrust/contract.algo.ts:22
    // trustedASA = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_asa" });
    bytec_1 // "trusted_asa"
    // smart_contracts/wetrust/contract.algo.ts:43
    // if (!this.trustedASA(Txn.sender).exists) {
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:22
    // trustedASA = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_asa" });
    concat
    // smart_contracts/wetrust/contract.algo.ts:43
    // if (!this.trustedASA(Txn.sender).exists) {
    box_len
    bury 1
    bnz add_after_if_else@4
    // smart_contracts/wetrust/contract.algo.ts:22
    // trustedASA = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_asa" });
    bytec_1 // "trusted_asa"
    // smart_contracts/wetrust/contract.algo.ts:44
    // this.trustedASA(Txn.sender).value = new arc4.DynamicArray<arc4.UintN64>();
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:22
    // trustedASA = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_asa" });
    concat
    // smart_contracts/wetrust/contract.algo.ts:44
    // this.trustedASA(Txn.sender).value = new arc4.DynamicArray<arc4.UintN64>();
    dup
    box_del
    pop
    bytec_3 // 0x0000
    box_put

add_after_if_else@4:
    // smart_contracts/wetrust/contract.algo.ts:24
    // adjacencyList = BoxMap<Account, arc4.DynamicArray<arc4.Address>>({ keyPrefix: "adjacency_list" }); // this or use a dynamic array as adjacency list.
    bytec_2 // "adjacency_list"
    // smart_contracts/wetrust/contract.algo.ts:46
    // if (!this.adjacencyList(Txn.sender).exists) {
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:24
    // adjacencyList = BoxMap<Account, arc4.DynamicArray<arc4.Address>>({ keyPrefix: "adjacency_list" }); // this or use a dynamic array as adjacency list.
    concat
    // smart_contracts/wetrust/contract.algo.ts:46
    // if (!this.adjacencyList(Txn.sender).exists) {
    box_len
    bury 1
    bnz add_after_if_else@6
    // smart_contracts/wetrust/contract.algo.ts:24
    // adjacencyList = BoxMap<Account, arc4.DynamicArray<arc4.Address>>({ keyPrefix: "adjacency_list" }); // this or use a dynamic array as adjacency list.
    bytec_2 // "adjacency_list"
    // smart_contracts/wetrust/contract.algo.ts:47
    // this.adjacencyList(Txn.sender).value = new arc4.DynamicArray<arc4.Address>();
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:24
    // adjacencyList = BoxMap<Account, arc4.DynamicArray<arc4.Address>>({ keyPrefix: "adjacency_list" }); // this or use a dynamic array as adjacency list.
    concat
    // smart_contracts/wetrust/contract.algo.ts:47
    // this.adjacencyList(Txn.sender).value = new arc4.DynamicArray<arc4.Address>();
    dup
    box_del
    pop
    bytec_3 // 0x0000
    box_put

add_after_if_else@6:
    // smart_contracts/wetrust/contract.algo.ts:50
    // if (app !== new UintN64(0)) {
    frame_dig -3
    bytec 4 // 0x0000000000000000
    !=
    bz add_after_if_else@11
    // smart_contracts/wetrust/contract.algo.ts:20
    // trustedApp = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_app" });
    bytec_0 // "trusted_app"
    // smart_contracts/wetrust/contract.algo.ts:51
    // let trustedAppList = this.trustedApp(Txn.sender).value.copy();
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:20
    // trustedApp = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_app" });
    concat
    // smart_contracts/wetrust/contract.algo.ts:51
    // let trustedAppList = this.trustedApp(Txn.sender).value.copy();
    box_get
    swap
    frame_bury 2
    assert // Box must have value
    // smart_contracts/wetrust/contract.algo.ts:52
    // for (let j: uint64 = 0; j < trustedAppList.length; j += 1) {
    intc_0 // 0
    frame_bury 3

add_while_top@8:
    // smart_contracts/wetrust/contract.algo.ts:52
    // for (let j: uint64 = 0; j < trustedAppList.length; j += 1) {
    frame_dig 2
    intc_0 // 0
    extract_uint16
    frame_dig 3
    >
    bz add_after_while@10
    // smart_contracts/wetrust/contract.algo.ts:53
    // const app = trustedAppList[j];
    frame_dig 2
    extract 2 0
    frame_dig 3
    dup
    cover 2
    intc_2 // 8
    *
    dig 1
    swap
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    // smart_contracts/wetrust/contract.algo.ts:54
    // trustedAppList.push(app);
    concat
    dup
    len
    intc_2 // 8
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 2
    // smart_contracts/wetrust/contract.algo.ts:52
    // for (let j: uint64 = 0; j < trustedAppList.length; j += 1) {
    intc_1 // 1
    +
    frame_bury 3
    b add_while_top@8

add_after_while@10:
    // smart_contracts/wetrust/contract.algo.ts:20
    // trustedApp = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_app" });
    bytec_0 // "trusted_app"
    // smart_contracts/wetrust/contract.algo.ts:56
    // this.trustedApp(Txn.sender).value = trustedAppList.copy();
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:20
    // trustedApp = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_app" });
    concat
    // smart_contracts/wetrust/contract.algo.ts:56
    // this.trustedApp(Txn.sender).value = trustedAppList.copy();
    dup
    box_del
    pop
    frame_dig 2
    box_put

add_after_if_else@11:
    // smart_contracts/wetrust/contract.algo.ts:59
    // if (asset !== new UintN64(0)) {
    frame_dig -2
    bytec 4 // 0x0000000000000000
    !=
    bz add_after_if_else@16
    // smart_contracts/wetrust/contract.algo.ts:22
    // trustedASA = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_asa" });
    bytec_1 // "trusted_asa"
    // smart_contracts/wetrust/contract.algo.ts:60
    // let trustedASAlist = this.trustedASA(Txn.sender).value.copy();
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:22
    // trustedASA = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_asa" });
    concat
    // smart_contracts/wetrust/contract.algo.ts:60
    // let trustedASAlist = this.trustedASA(Txn.sender).value.copy();
    box_get
    swap
    frame_bury 1
    assert // Box must have value
    // smart_contracts/wetrust/contract.algo.ts:61
    // for (let j: uint64 = 0; j < trustedASAlist.length; j += 1) {
    intc_0 // 0
    frame_bury 4

add_while_top@13:
    // smart_contracts/wetrust/contract.algo.ts:61
    // for (let j: uint64 = 0; j < trustedASAlist.length; j += 1) {
    frame_dig 1
    intc_0 // 0
    extract_uint16
    frame_dig 4
    >
    bz add_after_while@15
    // smart_contracts/wetrust/contract.algo.ts:62
    // const asset = trustedASAlist[j];
    frame_dig 1
    extract 2 0
    frame_dig 4
    dup
    cover 2
    intc_2 // 8
    *
    dig 1
    swap
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    // smart_contracts/wetrust/contract.algo.ts:63
    // trustedASAlist.push(asset);
    concat
    dup
    len
    intc_2 // 8
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 1
    // smart_contracts/wetrust/contract.algo.ts:61
    // for (let j: uint64 = 0; j < trustedASAlist.length; j += 1) {
    intc_1 // 1
    +
    frame_bury 4
    b add_while_top@13

add_after_while@15:
    // smart_contracts/wetrust/contract.algo.ts:22
    // trustedASA = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_asa" });
    bytec_1 // "trusted_asa"
    // smart_contracts/wetrust/contract.algo.ts:65
    // this.trustedASA(Txn.sender).value = trustedASAlist.copy();
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:22
    // trustedASA = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_asa" });
    concat
    // smart_contracts/wetrust/contract.algo.ts:65
    // this.trustedASA(Txn.sender).value = trustedASAlist.copy();
    dup
    box_del
    pop
    frame_dig 1
    box_put

add_after_if_else@16:
    // smart_contracts/wetrust/contract.algo.ts:68
    // if (peer !== new arc4.Address(Global.zeroAddress)) {
    frame_dig -1
    global ZeroAddress
    !=
    bz add_after_if_else@21
    // smart_contracts/wetrust/contract.algo.ts:24
    // adjacencyList = BoxMap<Account, arc4.DynamicArray<arc4.Address>>({ keyPrefix: "adjacency_list" }); // this or use a dynamic array as adjacency list.
    bytec_2 // "adjacency_list"
    // smart_contracts/wetrust/contract.algo.ts:69
    // let adjacencyList = this.adjacencyList(Txn.sender).value.copy();
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:24
    // adjacencyList = BoxMap<Account, arc4.DynamicArray<arc4.Address>>({ keyPrefix: "adjacency_list" }); // this or use a dynamic array as adjacency list.
    concat
    // smart_contracts/wetrust/contract.algo.ts:69
    // let adjacencyList = this.adjacencyList(Txn.sender).value.copy();
    box_get
    swap
    frame_bury 0
    assert // Box must have value
    // smart_contracts/wetrust/contract.algo.ts:70
    // for (let j: uint64 = 0; j < adjacencyList.length; j += 1) {
    intc_0 // 0
    frame_bury 5

add_while_top@18:
    // smart_contracts/wetrust/contract.algo.ts:70
    // for (let j: uint64 = 0; j < adjacencyList.length; j += 1) {
    frame_dig 0
    intc_0 // 0
    extract_uint16
    frame_dig 5
    >
    bz add_after_while@20
    // smart_contracts/wetrust/contract.algo.ts:71
    // const peer = adjacencyList[j];
    frame_dig 0
    extract 2 0
    frame_dig 5
    dup
    cover 2
    intc_3 // 32
    *
    dig 1
    swap
    intc_3 // 32
    extract3 // on error: Index access is out of bounds
    // smart_contracts/wetrust/contract.algo.ts:72
    // adjacencyList.push(peer);
    concat
    dup
    len
    intc_3 // 32
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0
    // smart_contracts/wetrust/contract.algo.ts:70
    // for (let j: uint64 = 0; j < adjacencyList.length; j += 1) {
    intc_1 // 1
    +
    frame_bury 5
    b add_while_top@18

add_after_while@20:
    // smart_contracts/wetrust/contract.algo.ts:24
    // adjacencyList = BoxMap<Account, arc4.DynamicArray<arc4.Address>>({ keyPrefix: "adjacency_list" }); // this or use a dynamic array as adjacency list.
    bytec_2 // "adjacency_list"
    // smart_contracts/wetrust/contract.algo.ts:74
    // this.adjacencyList(Txn.sender).value = adjacencyList.copy();
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:24
    // adjacencyList = BoxMap<Account, arc4.DynamicArray<arc4.Address>>({ keyPrefix: "adjacency_list" }); // this or use a dynamic array as adjacency list.
    concat
    // smart_contracts/wetrust/contract.algo.ts:74
    // this.adjacencyList(Txn.sender).value = adjacencyList.copy();
    dup
    box_del
    pop
    frame_dig 0
    box_put

add_after_if_else@21:
    retsub


// smart_contracts/wetrust/contract.algo.ts::Wetrust.remove(app: bytes, asset: bytes, peer: bytes) -> void:
remove:
    // smart_contracts/wetrust/contract.algo.ts:78
    // remove(app: arc4.UintN64, asset: arc4.UintN64, peer: arc4.Address): void {
    proto 3 0
    intc_0 // 0
    dupn 11
    pushbytes ""
    dupn 2
    // smart_contracts/wetrust/contract.algo.ts:79
    // if (app !== new arc4.UintN64(0)) {
    frame_dig -3
    bytec 4 // 0x0000000000000000
    !=
    bz remove_after_if_else@7
    // smart_contracts/wetrust/contract.algo.ts:20
    // trustedApp = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_app" });
    bytec_0 // "trusted_app"
    // smart_contracts/wetrust/contract.algo.ts:80
    // const appList = this.trustedApp(Txn.sender).value.copy();
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:20
    // trustedApp = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_app" });
    concat
    // smart_contracts/wetrust/contract.algo.ts:80
    // const appList = this.trustedApp(Txn.sender).value.copy();
    box_get
    swap
    frame_bury 0
    assert // Box must have value
    // smart_contracts/wetrust/contract.algo.ts:81
    // let newList = new arc4.DynamicArray<UintN64>();
    bytec_3 // 0x0000
    frame_bury 2
    // smart_contracts/wetrust/contract.algo.ts:82
    // for (let i: uint64 = 0; i < appList.length; i += 1) {
    intc_0 // 0
    frame_bury 12

remove_while_top@2:
    // smart_contracts/wetrust/contract.algo.ts:82
    // for (let i: uint64 = 0; i < appList.length; i += 1) {
    frame_dig 0
    intc_0 // 0
    extract_uint16
    frame_dig 12
    >
    bz remove_after_while@6
    // smart_contracts/wetrust/contract.algo.ts:83
    // if (appList[i] !== app) {
    frame_dig 0
    extract 2 0
    frame_dig 12
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    dup
    frame_bury 11
    frame_dig -3
    !=
    frame_dig 2
    frame_bury 3
    bz remove_after_if_else@5
    // smart_contracts/wetrust/contract.algo.ts:84
    // newList.push(appList[i]);
    frame_dig 2
    extract 2 0
    frame_dig 11
    concat
    dup
    len
    intc_2 // 8
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 3

remove_after_if_else@5:
    frame_dig 3
    frame_bury 2
    // smart_contracts/wetrust/contract.algo.ts:82
    // for (let i: uint64 = 0; i < appList.length; i += 1) {
    frame_dig 12
    intc_1 // 1
    +
    frame_bury 12
    b remove_while_top@2

remove_after_while@6:
    // smart_contracts/wetrust/contract.algo.ts:20
    // trustedApp = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_app" });
    bytec_0 // "trusted_app"
    // smart_contracts/wetrust/contract.algo.ts:87
    // this.trustedApp(Txn.sender).value = newList.copy();
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:20
    // trustedApp = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_app" });
    concat
    // smart_contracts/wetrust/contract.algo.ts:87
    // this.trustedApp(Txn.sender).value = newList.copy();
    dup
    box_del
    pop
    frame_dig 2
    box_put

remove_after_if_else@7:
    // smart_contracts/wetrust/contract.algo.ts:89
    // if (asset !== new arc4.UintN64(0)) {
    frame_dig -2
    bytec 4 // 0x0000000000000000
    !=
    bz remove_after_if_else@14
    // smart_contracts/wetrust/contract.algo.ts:22
    // trustedASA = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_asa" });
    bytec_1 // "trusted_asa"
    // smart_contracts/wetrust/contract.algo.ts:90
    // const assetList = this.trustedASA(Txn.sender).value.copy();
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:22
    // trustedASA = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_asa" });
    concat
    // smart_contracts/wetrust/contract.algo.ts:90
    // const assetList = this.trustedASA(Txn.sender).value.copy();
    box_get
    swap
    frame_bury 1
    assert // Box must have value
    // smart_contracts/wetrust/contract.algo.ts:91
    // let newList = new arc4.DynamicArray<UintN64>();
    bytec_3 // 0x0000
    frame_bury 4
    // smart_contracts/wetrust/contract.algo.ts:92
    // for (let i: uint64 = 0; i < assetList.length; i += 1) {
    intc_0 // 0
    frame_bury 13

remove_while_top@9:
    // smart_contracts/wetrust/contract.algo.ts:92
    // for (let i: uint64 = 0; i < assetList.length; i += 1) {
    frame_dig 1
    intc_0 // 0
    extract_uint16
    frame_dig 13
    >
    bz remove_after_while@13
    // smart_contracts/wetrust/contract.algo.ts:93
    // if (assetList[i] !== asset) {
    frame_dig 1
    extract 2 0
    frame_dig 13
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    dup
    frame_bury 9
    frame_dig -2
    !=
    frame_dig 4
    frame_bury 5
    bz remove_after_if_else@12
    // smart_contracts/wetrust/contract.algo.ts:94
    // newList.push(assetList[i]);
    frame_dig 4
    extract 2 0
    frame_dig 9
    concat
    dup
    len
    intc_2 // 8
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 5

remove_after_if_else@12:
    frame_dig 5
    frame_bury 4
    // smart_contracts/wetrust/contract.algo.ts:92
    // for (let i: uint64 = 0; i < assetList.length; i += 1) {
    frame_dig 13
    intc_1 // 1
    +
    frame_bury 13
    b remove_while_top@9

remove_after_while@13:
    // smart_contracts/wetrust/contract.algo.ts:22
    // trustedASA = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_asa" });
    bytec_1 // "trusted_asa"
    // smart_contracts/wetrust/contract.algo.ts:97
    // this.trustedASA(Txn.sender).value = newList.copy();
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:22
    // trustedASA = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_asa" });
    concat
    // smart_contracts/wetrust/contract.algo.ts:97
    // this.trustedASA(Txn.sender).value = newList.copy();
    dup
    box_del
    pop
    frame_dig 4
    box_put

remove_after_if_else@14:
    // smart_contracts/wetrust/contract.algo.ts:99
    // if (peer !== new arc4.Address(Global.zeroAddress)) {
    frame_dig -1
    global ZeroAddress
    !=
    bz remove_after_if_else@21
    // smart_contracts/wetrust/contract.algo.ts:24
    // adjacencyList = BoxMap<Account, arc4.DynamicArray<arc4.Address>>({ keyPrefix: "adjacency_list" }); // this or use a dynamic array as adjacency list.
    bytec_2 // "adjacency_list"
    // smart_contracts/wetrust/contract.algo.ts:100
    // const peerList = this.adjacencyList(Txn.sender).value.copy();
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:24
    // adjacencyList = BoxMap<Account, arc4.DynamicArray<arc4.Address>>({ keyPrefix: "adjacency_list" }); // this or use a dynamic array as adjacency list.
    concat
    // smart_contracts/wetrust/contract.algo.ts:100
    // const peerList = this.adjacencyList(Txn.sender).value.copy();
    box_get
    swap
    frame_bury 8
    assert // Box must have value
    // smart_contracts/wetrust/contract.algo.ts:101
    // let newList = new arc4.DynamicArray<arc4.Address>();
    bytec_3 // 0x0000
    frame_bury 6
    // smart_contracts/wetrust/contract.algo.ts:102
    // for (let i: uint64 = 0; i < peerList.length; i += 1) {
    intc_0 // 0
    frame_bury 14

remove_while_top@16:
    // smart_contracts/wetrust/contract.algo.ts:102
    // for (let i: uint64 = 0; i < peerList.length; i += 1) {
    frame_dig 8
    intc_0 // 0
    extract_uint16
    frame_dig 14
    >
    bz remove_after_while@20
    // smart_contracts/wetrust/contract.algo.ts:103
    // if (peerList[i] !== peer) {
    frame_dig 8
    extract 2 0
    frame_dig 14
    intc_3 // 32
    *
    intc_3 // 32
    extract3 // on error: Index access is out of bounds
    dup
    frame_bury 10
    frame_dig -1
    !=
    frame_dig 6
    frame_bury 7
    bz remove_after_if_else@19
    // smart_contracts/wetrust/contract.algo.ts:104
    // newList.push(peerList[i]);
    frame_dig 6
    extract 2 0
    frame_dig 10
    concat
    dup
    len
    intc_3 // 32
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 7

remove_after_if_else@19:
    frame_dig 7
    frame_bury 6
    // smart_contracts/wetrust/contract.algo.ts:102
    // for (let i: uint64 = 0; i < peerList.length; i += 1) {
    frame_dig 14
    intc_1 // 1
    +
    frame_bury 14
    b remove_while_top@16

remove_after_while@20:
    // smart_contracts/wetrust/contract.algo.ts:24
    // adjacencyList = BoxMap<Account, arc4.DynamicArray<arc4.Address>>({ keyPrefix: "adjacency_list" }); // this or use a dynamic array as adjacency list.
    bytec_2 // "adjacency_list"
    // smart_contracts/wetrust/contract.algo.ts:107
    // this.adjacencyList(Txn.sender).value = newList.copy();
    txn Sender
    // smart_contracts/wetrust/contract.algo.ts:24
    // adjacencyList = BoxMap<Account, arc4.DynamicArray<arc4.Address>>({ keyPrefix: "adjacency_list" }); // this or use a dynamic array as adjacency list.
    concat
    // smart_contracts/wetrust/contract.algo.ts:107
    // this.adjacencyList(Txn.sender).value = newList.copy();
    dup
    box_del
    pop
    frame_dig 6
    box_put

remove_after_if_else@21:
    retsub


// smart_contracts/wetrust/contract.algo.ts::Wetrust.getTrustedApp(account: bytes) -> bytes:
getTrustedApp:
    // smart_contracts/wetrust/contract.algo.ts:113-114
    // @abimethod({ readonly: true })
    // getTrustedApp(account: Account): arc4.DynamicArray<arc4.UintN64> {
    proto 1 1
    // smart_contracts/wetrust/contract.algo.ts:20
    // trustedApp = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_app" });
    bytec_0 // "trusted_app"
    frame_dig -1
    concat
    // smart_contracts/wetrust/contract.algo.ts:115
    // return this.trustedApp(account).value;
    box_get
    assert // Box must have value
    retsub


// smart_contracts/wetrust/contract.algo.ts::Wetrust.getTrustedASA(account: bytes) -> bytes:
getTrustedASA:
    // smart_contracts/wetrust/contract.algo.ts:118-119
    // @abimethod({ readonly: true })
    // getTrustedASA(account: Account): arc4.DynamicArray<arc4.UintN64> {
    proto 1 1
    // smart_contracts/wetrust/contract.algo.ts:22
    // trustedASA = BoxMap<Account, arc4.DynamicArray<arc4.UintN64>>({ keyPrefix: "trusted_asa" });
    bytec_1 // "trusted_asa"
    frame_dig -1
    concat
    // smart_contracts/wetrust/contract.algo.ts:120
    // return this.trustedASA(account).value;
    box_get
    assert // Box must have value
    retsub


// smart_contracts/wetrust/contract.algo.ts::Wetrust.getAdjacencyList(account: bytes) -> bytes:
getAdjacencyList:
    // smart_contracts/wetrust/contract.algo.ts:123-124
    // @abimethod({ readonly: true })
    // getAdjacencyList(account: Account): arc4.DynamicArray<arc4.Address> {
    proto 1 1
    // smart_contracts/wetrust/contract.algo.ts:24
    // adjacencyList = BoxMap<Account, arc4.DynamicArray<arc4.Address>>({ keyPrefix: "adjacency_list" }); // this or use a dynamic array as adjacency list.
    bytec_2 // "adjacency_list"
    frame_dig -1
    concat
    // smart_contracts/wetrust/contract.algo.ts:125
    // return this.adjacencyList(account).value;
    box_get
    assert // Box must have value
    retsub
