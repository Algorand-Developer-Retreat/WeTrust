/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Wetrust","structs":{},"methods":[{"name":"init","args":[{"type":"pay","name":"payMbr"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"add","args":[{"type":"uint64","name":"app","desc":"- list of trusted Applications to add; leave empty if not adding any"},{"type":"uint64","name":"asset","desc":"- list of trusted ASAs to add; leave empty if not adding any"},{"type":"address","name":"peer","desc":"- list of trusted peers to add; leave empty if not adding any"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"method to add trusted Applications, trusted ASAs and trusted peers to your list","events":[],"recommendations":{}},{"name":"remove","args":[{"type":"uint64","name":"app"},{"type":"uint64","name":"asset"},{"type":"address","name":"peer"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getTrustedApp","args":[{"type":"account","name":"account"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getTrustedASA","args":[{"type":"account","name":"account"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getAdjacencyList","args":[{"type":"account","name":"account"}],"returns":{"type":"address[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{"trustedApp":{"keyType":"AVMString","valueType":"uint64[]","key":"dHJ1c3RlZF9hcHA="},"trustedASA":{"keyType":"AVMString","valueType":"uint64[]","key":"dHJ1c3RlZF9hc2E="},"adjacencyList":{"keyType":"AVMString","valueType":"address[]","key":"YWRqYWNlbmN5X2xpc3Q="}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[363,460,557,650,750,850,943,953,963],"errorMessage":"Box must have value"},{"pc":[400,497,592,677,777,877],"errorMessage":"Index access is out of bounds"},{"pc":[124,147,170,193,214,235],"errorMessage":"OnCompletion is not NoOp"},{"pc":[545],"errorMessage":"adjacencyList should exist, call init first"},{"pc":[291,467,562],"errorMessage":"assert target is match for conditions"},{"pc":[262],"errorMessage":"can only call when creating"},{"pc":[127,150,173,196,217,238],"errorMessage":"can only call when not creating"},{"pc":[370],"errorMessage":"max number of App reached"},{"pc":[248],"errorMessage":"transaction type is pay"},{"pc":[448],"errorMessage":"trustedASAlist should exist, call init first"},{"pc":[351],"errorMessage":"trustedAppList should exist, call init first"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEIICYGC3RydXN0ZWRfYXBwC3RydXN0ZWRfYXNhDmFkamFjZW5jeV9saXN0AgAACAAAAAAAAAAABBUffHUxG0EAuIIGBKH7UGsEh6g9/ATvOhIxBIrddNIE2rfuPwQ7ok5/NhoAjgYAcQBcAEcAMAAZAAIiQzEZFEQxGEQ2GgEXwByIAzInBUxQsCNDMRkURDEYRDYaARfAHIgDEScFTFCwI0MxGRREMRhENhoBF8AciALwJwVMULAjQzEZFEQxGEQ2GgE2GgI2GgOIAZ8jQzEZFEQxGEQ2GgE2GgI2GgOIAF4jQzEZFEQxGEQxFiMJSTgQIxJEiAANI0MxGUD/dDEYFEQjQ4oBAIv/OAcyChJBACqL/zgIgczQAQ9BAB4jRCgxAFBJvEgrvykxAFBJvEgrvyoxAFBJvEgrv4kiQv/figMAIkcCgABHAov9JwQTQQBZKDEAUL1FASMSRCgxAFC+TElOAowCRCJZgYABDkQijAOLAiJZiwMNQQAliwJXAgCLA0lOAiQLSwFMJFhQSRUkChZXBgJMUIwCIwiMA0L/0SgxAFBJvEiLAr+L/icEE0EAWSkxAFC9RQEjEkQpMQBQvkxJTgKMAUQiWYGAAQ5EIowEiwEiWYsEDUEAJYsBVwIAiwRJTgIkC0sBTCRYUEkVJAoWVwYCTFCMASMIjARC/9EpMQBQSbxIiwG/i/8yAxNBAFcqMQBQvUUBIxJEKjEAUL5MSU4CjABEIlklDkQijAWLACJZiwUNQQAliwBXAgCLBUlOAiULSwFMJVhQSRUlChZXBgJMUIwAIwiMBUL/0SoxAFBJvEiLAL+JigMAIkcLgABHAov9JwQTQQBcKDEAUL5MjABEK4wCIowMiwAiWYsMDUEAOYsAVwIAiwwkCyRYSYwLi/0TiwKMA0EAFIsCVwIAiwtQSRUkChZXBgJMUIwDiwOMAosMIwiMDEL/vSgxAFBJvEiLAr+L/icEE0EAXCkxAFC+TIwBRCuMBCKMDYsBIlmLDQ1BADmLAVcCAIsNJAskWEmMCYv+E4sEjAVBABSLBFcCAIsJUEkVJAoWVwYCTFCMBYsFjASLDSMIjA1C/70pMQBQSbxIiwS/i/8yAxNBAFwqMQBQvkyMCEQrjAYijA6LCCJZiw4NQQA5iwhXAgCLDiULJVhJjAqL/xOLBowHQQAUiwZXAgCLClBJFSUKFlcGAkxQjAeLB4wGiw4jCIwOQv+9KjEAUEm8SIsGv4mKAQEoi/9QvkSJigEBKYv/UL5EiYoBASqL/1C+RIk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":5,"patch":3}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Wetrust contract
 */
export type WetrustArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'init(pay)void': {
      payMbr: AppMethodCallTransactionArgument
    }
    'add(uint64,uint64,address)void': {
      /**
       * - list of trusted Applications to add; leave empty if not adding any
       */
      app: bigint | number
      /**
       * - list of trusted ASAs to add; leave empty if not adding any
       */
      asset: bigint | number
      /**
       * - list of trusted peers to add; leave empty if not adding any
       */
      peer: string
    }
    'remove(uint64,uint64,address)void': {
      app: bigint | number
      asset: bigint | number
      peer: string
    }
    'getTrustedApp(account)uint64[]': {
      account: Uint8Array | string
    }
    'getTrustedASA(account)uint64[]': {
      account: Uint8Array | string
    }
    'getAdjacencyList(account)address[]': {
      account: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'init(pay)void': [payMbr: AppMethodCallTransactionArgument]
    'add(uint64,uint64,address)void': [app: bigint | number, asset: bigint | number, peer: string]
    'remove(uint64,uint64,address)void': [app: bigint | number, asset: bigint | number, peer: string]
    'getTrustedApp(account)uint64[]': [account: Uint8Array | string]
    'getTrustedASA(account)uint64[]': [account: Uint8Array | string]
    'getAdjacencyList(account)address[]': [account: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type WetrustReturns = {
  'init(pay)void': void
  'add(uint64,uint64,address)void': void
  'remove(uint64,uint64,address)void': void
  'getTrustedApp(account)uint64[]': bigint[]
  'getTrustedASA(account)uint64[]': bigint[]
  'getAdjacencyList(account)address[]': string[]
}

/**
 * Defines the types of available calls and state of the Wetrust smart contract.
 */
export type WetrustTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'init(pay)void' | 'init', {
      argsObj: WetrustArgs['obj']['init(pay)void']
      argsTuple: WetrustArgs['tuple']['init(pay)void']
      returns: WetrustReturns['init(pay)void']
    }>
    & Record<'add(uint64,uint64,address)void' | 'add', {
      argsObj: WetrustArgs['obj']['add(uint64,uint64,address)void']
      argsTuple: WetrustArgs['tuple']['add(uint64,uint64,address)void']
      returns: WetrustReturns['add(uint64,uint64,address)void']
    }>
    & Record<'remove(uint64,uint64,address)void' | 'remove', {
      argsObj: WetrustArgs['obj']['remove(uint64,uint64,address)void']
      argsTuple: WetrustArgs['tuple']['remove(uint64,uint64,address)void']
      returns: WetrustReturns['remove(uint64,uint64,address)void']
    }>
    & Record<'getTrustedApp(account)uint64[]' | 'getTrustedApp', {
      argsObj: WetrustArgs['obj']['getTrustedApp(account)uint64[]']
      argsTuple: WetrustArgs['tuple']['getTrustedApp(account)uint64[]']
      returns: WetrustReturns['getTrustedApp(account)uint64[]']
    }>
    & Record<'getTrustedASA(account)uint64[]' | 'getTrustedASA', {
      argsObj: WetrustArgs['obj']['getTrustedASA(account)uint64[]']
      argsTuple: WetrustArgs['tuple']['getTrustedASA(account)uint64[]']
      returns: WetrustReturns['getTrustedASA(account)uint64[]']
    }>
    & Record<'getAdjacencyList(account)address[]' | 'getAdjacencyList', {
      argsObj: WetrustArgs['obj']['getAdjacencyList(account)address[]']
      argsTuple: WetrustArgs['tuple']['getAdjacencyList(account)address[]']
      returns: WetrustReturns['getAdjacencyList(account)address[]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {
        trustedApp: bigint[]
        trustedAsa: bigint[]
        adjacencyList: string[]
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type WetrustSignatures = keyof WetrustTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type WetrustNonVoidMethodSignatures = keyof WetrustTypes['methods'] extends infer T ? T extends keyof WetrustTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Wetrust smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends WetrustSignatures> = WetrustTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Wetrust smart contract to the method's return type
 */
export type MethodReturn<TSignature extends WetrustSignatures> = WetrustTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = WetrustTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type WetrustCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type WetrustDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: WetrustCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Wetrust smart contract
 */
export abstract class WetrustParamsFactory {
  /**
   * Constructs a no op call for the init(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static init(params: CallParams<WetrustArgs['obj']['init(pay)void'] | WetrustArgs['tuple']['init(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'init(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payMbr],
    }
  }
  /**
   * Constructs a no op call for the add(uint64,uint64,address)void ABI method
   *
   * method to add trusted Applications, trusted ASAs and trusted peers to your list
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static add(params: CallParams<WetrustArgs['obj']['add(uint64,uint64,address)void'] | WetrustArgs['tuple']['add(uint64,uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'add(uint64,uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.asset, params.args.peer],
    }
  }
  /**
   * Constructs a no op call for the remove(uint64,uint64,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static remove(params: CallParams<WetrustArgs['obj']['remove(uint64,uint64,address)void'] | WetrustArgs['tuple']['remove(uint64,uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'remove(uint64,uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.asset, params.args.peer],
    }
  }
  /**
   * Constructs a no op call for the getTrustedApp(account)uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTrustedApp(params: CallParams<WetrustArgs['obj']['getTrustedApp(account)uint64[]'] | WetrustArgs['tuple']['getTrustedApp(account)uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTrustedApp(account)uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the getTrustedASA(account)uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTrustedAsa(params: CallParams<WetrustArgs['obj']['getTrustedASA(account)uint64[]'] | WetrustArgs['tuple']['getTrustedASA(account)uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTrustedASA(account)uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the getAdjacencyList(account)address[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAdjacencyList(params: CallParams<WetrustArgs['obj']['getAdjacencyList(account)address[]'] | WetrustArgs['tuple']['getAdjacencyList(account)address[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getAdjacencyList(account)address[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Wetrust smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class WetrustFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `WetrustFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new WetrustClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new WetrustClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Wetrust smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: WetrustDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new WetrustClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Wetrust smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Wetrust smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Wetrust smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new WetrustClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Wetrust smart contract
 */
export class WetrustClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `WetrustClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Wetrust app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `WetrustClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends WetrustNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `WetrustClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<WetrustClient> {
    return new WetrustClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `WetrustClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<WetrustClient> {
    return new WetrustClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Wetrust smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Wetrust smart contract using the `init(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    init: (params: CallParams<WetrustArgs['obj']['init(pay)void'] | WetrustArgs['tuple']['init(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WetrustParamsFactory.init(params))
    },

    /**
     * Makes a call to the Wetrust smart contract using the `add(uint64,uint64,address)void` ABI method.
     *
     * method to add trusted Applications, trusted ASAs and trusted peers to your list
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    add: (params: CallParams<WetrustArgs['obj']['add(uint64,uint64,address)void'] | WetrustArgs['tuple']['add(uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WetrustParamsFactory.add(params))
    },

    /**
     * Makes a call to the Wetrust smart contract using the `remove(uint64,uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    remove: (params: CallParams<WetrustArgs['obj']['remove(uint64,uint64,address)void'] | WetrustArgs['tuple']['remove(uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WetrustParamsFactory.remove(params))
    },

    /**
     * Makes a call to the Wetrust smart contract using the `getTrustedApp(account)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTrustedApp: (params: CallParams<WetrustArgs['obj']['getTrustedApp(account)uint64[]'] | WetrustArgs['tuple']['getTrustedApp(account)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WetrustParamsFactory.getTrustedApp(params))
    },

    /**
     * Makes a call to the Wetrust smart contract using the `getTrustedASA(account)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTrustedAsa: (params: CallParams<WetrustArgs['obj']['getTrustedASA(account)uint64[]'] | WetrustArgs['tuple']['getTrustedASA(account)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WetrustParamsFactory.getTrustedAsa(params))
    },

    /**
     * Makes a call to the Wetrust smart contract using the `getAdjacencyList(account)address[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAdjacencyList: (params: CallParams<WetrustArgs['obj']['getAdjacencyList(account)address[]'] | WetrustArgs['tuple']['getAdjacencyList(account)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WetrustParamsFactory.getAdjacencyList(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Wetrust smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Wetrust smart contract using the `init(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    init: (params: CallParams<WetrustArgs['obj']['init(pay)void'] | WetrustArgs['tuple']['init(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WetrustParamsFactory.init(params))
    },

    /**
     * Makes a call to the Wetrust smart contract using the `add(uint64,uint64,address)void` ABI method.
     *
     * method to add trusted Applications, trusted ASAs and trusted peers to your list
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    add: (params: CallParams<WetrustArgs['obj']['add(uint64,uint64,address)void'] | WetrustArgs['tuple']['add(uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WetrustParamsFactory.add(params))
    },

    /**
     * Makes a call to the Wetrust smart contract using the `remove(uint64,uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    remove: (params: CallParams<WetrustArgs['obj']['remove(uint64,uint64,address)void'] | WetrustArgs['tuple']['remove(uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WetrustParamsFactory.remove(params))
    },

    /**
     * Makes a call to the Wetrust smart contract using the `getTrustedApp(account)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTrustedApp: (params: CallParams<WetrustArgs['obj']['getTrustedApp(account)uint64[]'] | WetrustArgs['tuple']['getTrustedApp(account)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WetrustParamsFactory.getTrustedApp(params))
    },

    /**
     * Makes a call to the Wetrust smart contract using the `getTrustedASA(account)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTrustedAsa: (params: CallParams<WetrustArgs['obj']['getTrustedASA(account)uint64[]'] | WetrustArgs['tuple']['getTrustedASA(account)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WetrustParamsFactory.getTrustedAsa(params))
    },

    /**
     * Makes a call to the Wetrust smart contract using the `getAdjacencyList(account)address[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAdjacencyList: (params: CallParams<WetrustArgs['obj']['getAdjacencyList(account)address[]'] | WetrustArgs['tuple']['getAdjacencyList(account)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WetrustParamsFactory.getAdjacencyList(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Wetrust smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Wetrust smart contract using the `init(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    init: async (params: CallParams<WetrustArgs['obj']['init(pay)void'] | WetrustArgs['tuple']['init(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WetrustParamsFactory.init(params))
      return {...result, return: result.return as unknown as (undefined | WetrustReturns['init(pay)void'])}
    },

    /**
     * Makes a call to the Wetrust smart contract using the `add(uint64,uint64,address)void` ABI method.
     *
     * method to add trusted Applications, trusted ASAs and trusted peers to your list
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    add: async (params: CallParams<WetrustArgs['obj']['add(uint64,uint64,address)void'] | WetrustArgs['tuple']['add(uint64,uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WetrustParamsFactory.add(params))
      return {...result, return: result.return as unknown as (undefined | WetrustReturns['add(uint64,uint64,address)void'])}
    },

    /**
     * Makes a call to the Wetrust smart contract using the `remove(uint64,uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    remove: async (params: CallParams<WetrustArgs['obj']['remove(uint64,uint64,address)void'] | WetrustArgs['tuple']['remove(uint64,uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WetrustParamsFactory.remove(params))
      return {...result, return: result.return as unknown as (undefined | WetrustReturns['remove(uint64,uint64,address)void'])}
    },

    /**
     * Makes a call to the Wetrust smart contract using the `getTrustedApp(account)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTrustedApp: async (params: CallParams<WetrustArgs['obj']['getTrustedApp(account)uint64[]'] | WetrustArgs['tuple']['getTrustedApp(account)uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WetrustParamsFactory.getTrustedApp(params))
      return {...result, return: result.return as unknown as (undefined | WetrustReturns['getTrustedApp(account)uint64[]'])}
    },

    /**
     * Makes a call to the Wetrust smart contract using the `getTrustedASA(account)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTrustedAsa: async (params: CallParams<WetrustArgs['obj']['getTrustedASA(account)uint64[]'] | WetrustArgs['tuple']['getTrustedASA(account)uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WetrustParamsFactory.getTrustedAsa(params))
      return {...result, return: result.return as unknown as (undefined | WetrustReturns['getTrustedASA(account)uint64[]'])}
    },

    /**
     * Makes a call to the Wetrust smart contract using the `getAdjacencyList(account)address[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAdjacencyList: async (params: CallParams<WetrustArgs['obj']['getAdjacencyList(account)address[]'] | WetrustArgs['tuple']['getAdjacencyList(account)address[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WetrustParamsFactory.getAdjacencyList(params))
      return {...result, return: result.return as unknown as (undefined | WetrustReturns['getAdjacencyList(account)address[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new WetrustClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Wetrust smart contract using the `getTrustedApp(account)uint64[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getTrustedApp(params: CallParams<WetrustArgs['obj']['getTrustedApp(account)uint64[]'] | WetrustArgs['tuple']['getTrustedApp(account)uint64[]']>) {
    const result = await this.appClient.send.call(WetrustParamsFactory.getTrustedApp(params))
    return result.return as unknown as WetrustReturns['getTrustedApp(account)uint64[]']
  }

  /**
   * Makes a readonly (simulated) call to the Wetrust smart contract using the `getTrustedASA(account)uint64[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getTrustedAsa(params: CallParams<WetrustArgs['obj']['getTrustedASA(account)uint64[]'] | WetrustArgs['tuple']['getTrustedASA(account)uint64[]']>) {
    const result = await this.appClient.send.call(WetrustParamsFactory.getTrustedAsa(params))
    return result.return as unknown as WetrustReturns['getTrustedASA(account)uint64[]']
  }

  /**
   * Makes a readonly (simulated) call to the Wetrust smart contract using the `getAdjacencyList(account)address[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAdjacencyList(params: CallParams<WetrustArgs['obj']['getAdjacencyList(account)address[]'] | WetrustArgs['tuple']['getAdjacencyList(account)address[]']>) {
    const result = await this.appClient.send.call(WetrustParamsFactory.getAdjacencyList(params))
    return result.return as unknown as WetrustReturns['getAdjacencyList(account)address[]']
  }

  /**
   * Methods to access state for the current Wetrust app
   */
  state = {
    /**
     * Methods to access box state for the current Wetrust app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          trustedApp: result.trustedApp,
          trustedAsa: result.trustedASA,
          adjacencyList: result.adjacencyList,
        }
      },
      /**
       * Get the current value of the trustedApp key in box state
       */
      trustedApp: async (): Promise<bigint[] | undefined> => { return (await this.appClient.state.box.getValue("trustedApp")) as bigint[] | undefined },
      /**
       * Get the current value of the trustedASA key in box state
       */
      trustedAsa: async (): Promise<bigint[] | undefined> => { return (await this.appClient.state.box.getValue("trustedASA")) as bigint[] | undefined },
      /**
       * Get the current value of the adjacencyList key in box state
       */
      adjacencyList: async (): Promise<string[] | undefined> => { return (await this.appClient.state.box.getValue("adjacencyList")) as string[] | undefined },
    },
  }

  public newGroup(): WetrustComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a init(pay)void method call against the Wetrust contract
       */
      init(params: CallParams<WetrustArgs['obj']['init(pay)void'] | WetrustArgs['tuple']['init(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.init(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a add(uint64,uint64,address)void method call against the Wetrust contract
       */
      add(params: CallParams<WetrustArgs['obj']['add(uint64,uint64,address)void'] | WetrustArgs['tuple']['add(uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.add(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a remove(uint64,uint64,address)void method call against the Wetrust contract
       */
      remove(params: CallParams<WetrustArgs['obj']['remove(uint64,uint64,address)void'] | WetrustArgs['tuple']['remove(uint64,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.remove(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getTrustedApp(account)uint64[] method call against the Wetrust contract
       */
      getTrustedApp(params: CallParams<WetrustArgs['obj']['getTrustedApp(account)uint64[]'] | WetrustArgs['tuple']['getTrustedApp(account)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTrustedApp(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTrustedApp(account)uint64[]', v))
        return this
      },
      /**
       * Add a getTrustedASA(account)uint64[] method call against the Wetrust contract
       */
      getTrustedAsa(params: CallParams<WetrustArgs['obj']['getTrustedASA(account)uint64[]'] | WetrustArgs['tuple']['getTrustedASA(account)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTrustedAsa(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTrustedASA(account)uint64[]', v))
        return this
      },
      /**
       * Add a getAdjacencyList(account)address[] method call against the Wetrust contract
       */
      getAdjacencyList(params: CallParams<WetrustArgs['obj']['getAdjacencyList(account)address[]'] | WetrustArgs['tuple']['getAdjacencyList(account)address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAdjacencyList(params)))
        resultMappers.push((v) => client.decodeReturnValue('getAdjacencyList(account)address[]', v))
        return this
      },
      /**
       * Add a clear state call to the Wetrust contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as WetrustComposer
  }
}
export type WetrustComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the init(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  init(params?: CallParams<WetrustArgs['obj']['init(pay)void'] | WetrustArgs['tuple']['init(pay)void']>): WetrustComposer<[...TReturns, WetrustReturns['init(pay)void'] | undefined]>

  /**
   * Calls the add(uint64,uint64,address)void ABI method.
   *
   * method to add trusted Applications, trusted ASAs and trusted peers to your list
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  add(params?: CallParams<WetrustArgs['obj']['add(uint64,uint64,address)void'] | WetrustArgs['tuple']['add(uint64,uint64,address)void']>): WetrustComposer<[...TReturns, WetrustReturns['add(uint64,uint64,address)void'] | undefined]>

  /**
   * Calls the remove(uint64,uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  remove(params?: CallParams<WetrustArgs['obj']['remove(uint64,uint64,address)void'] | WetrustArgs['tuple']['remove(uint64,uint64,address)void']>): WetrustComposer<[...TReturns, WetrustReturns['remove(uint64,uint64,address)void'] | undefined]>

  /**
   * Calls the getTrustedApp(account)uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTrustedApp(params?: CallParams<WetrustArgs['obj']['getTrustedApp(account)uint64[]'] | WetrustArgs['tuple']['getTrustedApp(account)uint64[]']>): WetrustComposer<[...TReturns, WetrustReturns['getTrustedApp(account)uint64[]'] | undefined]>

  /**
   * Calls the getTrustedASA(account)uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTrustedAsa(params?: CallParams<WetrustArgs['obj']['getTrustedASA(account)uint64[]'] | WetrustArgs['tuple']['getTrustedASA(account)uint64[]']>): WetrustComposer<[...TReturns, WetrustReturns['getTrustedASA(account)uint64[]'] | undefined]>

  /**
   * Calls the getAdjacencyList(account)address[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAdjacencyList(params?: CallParams<WetrustArgs['obj']['getAdjacencyList(account)address[]'] | WetrustArgs['tuple']['getAdjacencyList(account)address[]']>): WetrustComposer<[...TReturns, WetrustReturns['getAdjacencyList(account)address[]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Wetrust smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): WetrustComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): WetrustComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<WetrustComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<WetrustComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<WetrustComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<WetrustComposerResults<TReturns>>
}
export type WetrustComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

